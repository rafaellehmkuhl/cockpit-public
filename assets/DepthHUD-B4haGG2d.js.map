{"version":3,"file":"DepthHUD-B4haGG2d.js","sources":["../../src/components/widgets/DepthHUD.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n    <canvas ref=\"canvasRef\" :width=\"canvasSize.width\" :height=\"canvasSize.height\" />\n  </div>\n  <v-dialog v-model=\"widgetStore.widgetManagerVars(widget.hash).configMenuOpen\" min-width=\"400\" max-width=\"35%\">\n    <v-card class=\"pa-2\" :style=\"interfaceStore.globalGlassMenuStyles\">\n      <v-card-title>Depth HUD config</v-card-title>\n      <v-card-text>\n        <v-switch\n          class=\"ma-1\"\n          label=\"Show height value\"\n          :model-value=\"widget.options.showDepthValue\"\n          :color=\"widget.options.showDepthValue ? 'white' : undefined\"\n          hide-details\n          @change=\"widget.options.showDepthValue = !widget.options.showDepthValue\"\n        />\n        <v-expansion-panels>\n          <v-expansion-panel class=\"bg-[#FFFFFF22] text-white\">\n            <v-expansion-panel-title>Color</v-expansion-panel-title>\n            <v-expansion-panel-text>\n              <v-color-picker\n                v-model=\"widget.options.hudColor\"\n                class=\"ma-2 text-white bg-[#FFFFFF22]\"\n                :swatches=\"colorSwatches\"\n                width=\"100%\"\n                show-swatches\n              />\n            </v-expansion-panel-text>\n          </v-expansion-panel>\n        </v-expansion-panels>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { useElementVisibility, useWindowSize } from '@vueuse/core'\nimport { colord } from 'colord'\nimport gsap from 'gsap'\nimport { unit } from 'mathjs'\nimport { computed, nextTick, onBeforeMount, onMounted, reactive, ref, toRefs, watch } from 'vue'\n\nimport { datalogger, DatalogVariable } from '@/libs/sensors-logging'\nimport { unitAbbreviation } from '@/libs/units'\nimport { range, resetCanvas, round } from '@/libs/utils'\nimport { useAppInterfaceStore } from '@/stores/appInterface'\nimport { useMainVehicleStore } from '@/stores/mainVehicle'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { Widget } from '@/types/widgets'\nconst interfaceStore = useAppInterfaceStore()\n\nconst widgetStore = useWidgetManagerStore()\n\ndatalogger.registerUsage(DatalogVariable.depth)\nconst store = useMainVehicleStore()\nconst props = defineProps<{\n  /**\n   * Widget reference\n   */\n  widget: Widget\n}>()\nconst widget = toRefs(props).widget\n\n// Pre-defined HUD colors\nconst colorSwatches = ref([['#FF2D2D'], ['#0ADB0ACC'], ['#FFFFFF']])\n\ntype RenderVariables = {\n  /**\n   * Object that stores the current state of the variables used on rendering\n   * It acts like a buffer between the system state variables and the rendering process\n   * Without it the state variables would be synced with rendering, which would\n   * make the rendering aliased. With this buffer we use GSAP to control the transisioning smoothing process.\n   */\n  depthLinesY: { [distance: string]: number }\n  /**\n   *\n   */\n  indicatorY: number\n}\nconst renderVars = reactive<RenderVariables>({ depthLinesY: {}, indicatorY: 0 })\n\nconst passedDepths = ref<number[]>(Array(10).fill(0))\nconst depth = computed(() => passedDepths.value[passedDepths.value.length - 1])\nconst recentDepths = computed(() => passedDepths.value.slice(-10))\nconst maxRecentDepth = computed(() => Math.max(...recentDepths.value))\nconst maxGraphDepth = computed(() => (1.3 * maxRecentDepth.value > 10 ? 1.3 * maxRecentDepth.value : 10))\nconst depthGraphDistances = computed(() => range(0, maxGraphDepth.value + 1))\nconst maxDepth = computed(() => Math.max(...depthGraphDistances.value))\nconst currentUnit = computed(() => unitAbbreviation[interfaceStore.displayUnitPreferences.distance])\n\nonBeforeMount(() => {\n  // Set initial widget options if they don't exist\n  if (Object.keys(widget.value.options).length === 0) {\n    widget.value.options = {\n      showDepthValue: true,\n      hudColor: colorSwatches.value[2][0],\n    }\n  }\n})\nonMounted(() => {\n  depthGraphDistances.value.forEach((distance: number) => (renderVars.depthLinesY[distance] = distanceY(distance)))\n  renderCanvas()\n})\n\n// Make canvas size follows window resizing\nconst { height: windowHeight } = useWindowSize()\nconst canvasSize = computed(() => ({\n  width: 128,\n  height: widget.value.size.height * windowHeight.value,\n}))\n\n// The implementation below makes sure we don't update the Depth value in the widget whenever\n// the system Depth (from vehicle) updates, preventing unnecessary performance bottlenecks.\nwatch(store.altitude, () => {\n  const altitude = store.altitude.msl\n  const newDepth = unit(-altitude.value, altitude.toJSON().unit)\n\n  const depthDiff = Math.abs(newDepth.value - (depth.value || 0))\n  if (depthDiff < 0.1) return\n\n  const depthConverted = newDepth.to(interfaceStore.displayUnitPreferences.distance)\n  passedDepths.value.push(depthConverted.toJSON().value)\n})\n\n// Returns the projected Y position of the depth line for a given distance\nconst distanceY = (altitude: number): number => {\n  const diff = altitude\n  const heightFactor = canvasSize.value.height / maxDepth.value\n  return round(heightFactor * diff)\n}\n\nconst canvasRef = ref<HTMLCanvasElement | undefined>()\nconst canvasContext = ref()\nconst renderCanvas = (): void => {\n  if (canvasRef.value === undefined || canvasRef.value === null) return\n  if (canvasContext.value === undefined) {\n    console.debug('Canvas context undefined!')\n    canvasContext.value = canvasRef.value.getContext('2d')\n    return\n  }\n  const ctx = canvasContext.value\n  const canvasWidth = canvasSize.value.width\n  const canvasHeight = canvasSize.value.height\n  resetCanvas(ctx)\n\n  const linesFontSize = 12\n  const refFontSize = 16\n  const refTriangleSize = 10\n  const stdPad = 1\n  const minorLinesGap = 5\n  const initialPaddingY = 10 * stdPad\n\n  // Set canvas general properties\n  ctx.textAlign = 'left'\n  ctx.textBaseline = 'middle'\n  ctx.font = `bold ${linesFontSize}px Arial`\n  ctx.strokeStyle = widget.value.options.hudColor\n  ctx.fillStyle = widget.value.options.hudColor\n\n  let lineDivisors = [1, 5]\n  if (maxGraphDepth.value > 25) lineDivisors = [2, 10]\n  if (maxGraphDepth.value > 125) lineDivisors = [5, 25]\n  if (maxGraphDepth.value > 250) lineDivisors = [10, 50]\n  if (maxGraphDepth.value > 500) lineDivisors = [20, 100]\n\n  // Draw line for each distance\n  for (const [distance, y] of Object.entries(renderVars.depthLinesY)) {\n    if (Number(distance) % lineDivisors[0] === 0) {\n      ctx.beginPath()\n      ctx.moveTo(canvasWidth - stdPad - 3.3 * linesFontSize - minorLinesGap, y + initialPaddingY)\n      ctx.lineTo(stdPad + 3.9 * refFontSize + refTriangleSize, y + initialPaddingY)\n      ctx.lineWidth = '1'\n    }\n    if (Number(distance) % lineDivisors[1] === 0) {\n      // For distances that are multiple of the major graph scale, use a bolder line and write distance down\n      ctx.lineWidth = '2'\n      ctx.moveTo(canvasWidth - stdPad - 3.3 * linesFontSize, y + initialPaddingY)\n      ctx.lineTo(stdPad + 3.9 * refFontSize + refTriangleSize, y + initialPaddingY)\n      ctx.fillText(`${distance} ${currentUnit.value}`, canvasWidth - stdPad - 3 * linesFontSize, y + initialPaddingY)\n    }\n    ctx.stroke()\n  }\n\n  const indicatorY = Math.max(renderVars.indicatorY, 0)\n\n  ctx.strokeStyle = widget.value.options.hudColor\n  ctx.fillStyle = widget.value.options.hudColor\n\n  // Draw reference text\n  if (widget.value.options.showDepthValue) {\n    ctx.textAlign = 'right'\n    ctx.font = `bold ${refFontSize}px Arial`\n    ctx.fillText(\n      `${depth.value.toFixed(1)} ${currentUnit.value}`,\n      stdPad + 4.3 * refFontSize - refTriangleSize - stdPad,\n      indicatorY + initialPaddingY\n    )\n  }\n\n  // Draw reference triangle\n  ctx.beginPath()\n  ctx.moveTo(stdPad + 4.3 * refFontSize + stdPad, indicatorY + initialPaddingY)\n  ctx.lineTo(stdPad + 4.3 * refFontSize + stdPad - refTriangleSize, indicatorY - refTriangleSize / 2 + initialPaddingY)\n  ctx.lineTo(stdPad + 4.3 * refFontSize + stdPad - refTriangleSize, indicatorY + refTriangleSize / 2 + initialPaddingY)\n  ctx.closePath()\n  ctx.fill()\n\n  // Add transparent mask over widget borders\n  ctx.globalCompositeOperation = 'source-in'\n  const grH = ctx.createLinearGradient(canvasWidth / 2, 0, canvasWidth / 2, canvasHeight)\n  grH.addColorStop(0.95, widget.value.options.hudColor)\n  grH.addColorStop(1.0, colord(widget.value.options.hudColor).alpha(0).toRgbString())\n  ctx.fillStyle = grH\n  ctx.fillRect(0, 0, canvasWidth, canvasHeight)\n}\n\n// Update the X position of each line in the render variables with GSAP to smooth the transition\nwatch(depth, () => {\n  depthGraphDistances.value.forEach((distance) => {\n    renderVars.depthLinesY[distance] ??= round(canvasSize.value.height + 100)\n    gsap.to(renderVars.depthLinesY, 0.5, { [distance]: distanceY(distance) })\n  })\n  const distancesToExclude = Object.keys(renderVars.depthLinesY).filter(\n    (distance) => !depthGraphDistances.value.includes(Number(distance))\n  )\n  distancesToExclude.forEach((distance) => {\n    gsap.to(renderVars.depthLinesY, 0.5, { [distance]: round(canvasSize.value.height + 100) })\n  })\n  gsap.to(renderVars, 0.5, { indicatorY: distanceY(depth.value) })\n})\n\n// Update canvas whenever reference variables changes\nwatch([renderVars, canvasSize, widget.value.options], () => {\n  if (!widgetStore.isWidgetVisible(widget.value)) return\n  nextTick(() => renderCanvas())\n})\n\nconst canvasVisible = useElementVisibility(canvasRef)\nwatch(canvasVisible, (isVisible, wasVisible) => {\n  if (isVisible && !wasVisible) renderCanvas()\n})\n</script>\n\n<style scoped>\n.main {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  min-width: 150px;\n  min-height: 200px;\n}\n</style>\n"],"names":["interfaceStore","useAppInterfaceStore","widgetStore","useWidgetManagerStore","datalogger","DatalogVariable","store","useMainVehicleStore","widget","toRefs","__props","colorSwatches","ref","renderVars","reactive","passedDepths","depth","computed","recentDepths","maxRecentDepth","maxGraphDepth","depthGraphDistances","range","maxDepth","currentUnit","unitAbbreviation","onBeforeMount","onMounted","distance","distanceY","renderCanvas","windowHeight","useWindowSize","canvasSize","watch","altitude","newDepth","unit","depthConverted","diff","heightFactor","round","canvasRef","canvasContext","ctx","canvasWidth","canvasHeight","resetCanvas","linesFontSize","refFontSize","refTriangleSize","stdPad","minorLinesGap","initialPaddingY","lineDivisors","y","indicatorY","grH","colord","_a","gsap","nextTick","canvasVisible","useElementVisibility","isVisible","wasVisible"],"mappings":"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"}