{"version":3,"file":"CompassHUD-B6wRepsr.js","sources":["../../src/components/widgets/CompassHUD.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n    <canvas ref=\"canvasRef\" :width=\"canvasSize.width\" :height=\"canvasSize.height\" />\n  </div>\n  <v-dialog v-model=\"widgetStore.widgetManagerVars(widget.hash).configMenuOpen\" min-width=\"400\" max-width=\"35%\">\n    <v-card class=\"px-8 pb-6 pt-2\" :style=\"interfaceStore.globalGlassMenuStyles\">\n      <v-card-title class=\"text-center\">HUD Compass widget config</v-card-title>\n      <v-card-text>\n        <v-switch\n          class=\"ma-1\"\n          label=\"Show yaw value\"\n          :color=\"widget.options.showYawValue ? 'white' : undefined\"\n          :model-value=\"widget.options.showYawValue\"\n          hide-details\n          @change=\"widget.options.showYawValue = !widget.options.showYawValue\"\n        />\n        <v-switch\n          class=\"ma-1\"\n          label=\"Use -180/+180 range\"\n          :color=\"widget.options.useNegativeRange ? 'white' : undefined\"\n          :model-value=\"widget.options.useNegativeRange\"\n          hide-details\n          @change=\"widget.options.useNegativeRange = !widget.options.useNegativeRange\"\n        />\n        <v-expansion-panels>\n          <v-expansion-panel class=\"bg-[#FFFFFF11] text-white mt-2\">\n            <v-expansion-panel-title>Color</v-expansion-panel-title>\n            <v-expansion-panel-text>\n              <v-color-picker\n                v-model=\"widget.options.hudColor\"\n                theme=\"dark\"\n                class=\"ma-1 bg-[#FFFFFF11] text-white\"\n                :swatches=\"colorSwatches\"\n                width=\"100%\"\n                show-swatches\n              />\n            </v-expansion-panel-text>\n          </v-expansion-panel>\n        </v-expansion-panels>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { useElementVisibility, useWindowSize } from '@vueuse/core'\nimport { colord } from 'colord'\nimport gsap from 'gsap'\nimport { computed, nextTick, onBeforeMount, onMounted, reactive, ref, toRefs, watch } from 'vue'\n\nimport { datalogger, DatalogVariable } from '@/libs/sensors-logging'\nimport { degrees, radians, resetCanvas } from '@/libs/utils'\nimport { useAppInterfaceStore } from '@/stores/appInterface'\nimport { useMainVehicleStore } from '@/stores/mainVehicle'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { Widget } from '@/types/widgets'\n\nconst widgetStore = useWidgetManagerStore()\nconst interfaceStore = useAppInterfaceStore()\n\ndatalogger.registerUsage(DatalogVariable.heading)\nconst store = useMainVehicleStore()\nconst props = defineProps<{\n  /**\n   * Widget reference\n   */\n  widget: Widget\n}>()\nconst widget = toRefs(props).widget\n\n// Pre-defined HUD colors\nconst colorSwatches = ref([['#FFFFFF'], ['#FF2D2D'], ['#0ADB0ACC']])\n\n// prettier-ignore\nconst angleRender = (angle: number): string => {\n  switch (angle) {\n    case -180: return 'S'\n    case -135: return 'SW'\n    case -90: return 'W'\n    case -45: return 'NW'\n    case 0: return 'N'\n    case 45: return 'NE'\n    case 90: return 'E'\n    case 135: return 'SE'\n    case 180: return 'S'\n    case 225: return 'SW'\n    case 270: return 'W'\n    case 315: return 'NW'\n    case 360: return 'N'\n    default:\n      return `${angle}°`\n  }\n}\n\ntype RenderVariables = {\n  /**\n   * Object that stores the current state of the variables used on rendering\n   * It acts like a buffer between the system state variables and the rendering process\n   * Without it the state variables would be synced with rendering, which would\n   * make the rendering aliased. With this buffer we use GSAP to control the transisioning smoothing process.\n   */\n  yawLinesX: { [angle: string]: number }\n}\nconst renderVars = reactive<RenderVariables>({ yawLinesX: {} })\n\n// Yaw angles for which vertical indication lines are rendered.\nconst yawAngles: number[] = []\nlet i = -180\nwhile (i < 181) {\n  yawAngles.push(i)\n  i += 3\n}\n\nonBeforeMount(() => {\n  // Set initial widget options if they don't exist\n  if (Object.keys(widget.value.options).length === 0) {\n    widget.value.options = {\n      showYawValue: true,\n      hudColor: colorSwatches.value[0][0],\n      useNegativeRange: false,\n    }\n  }\n})\nonMounted(() => {\n  yawAngles.forEach((angle: number) => (renderVars.yawLinesX[angle] = angleX(angle)))\n  renderCanvas()\n})\n\n// Make canvas size follows window resizing\nconst { width: windowWidth } = useWindowSize()\nconst canvasSize = computed(() => ({\n  width: widget.value.size.width * windowWidth.value,\n  height: 64,\n}))\n\n// The implementation below makes sure we don't update the Yaw value in the widget whenever\n// the system Yaw (from vehicle) updates, preventing unnecessary performance bottlenecks.\nconst yaw = ref(0)\nlet oldYaw: number | undefined = undefined\nwatch(store.attitude, (attitude) => {\n  const yawDiff = Math.abs(degrees(attitude.yaw - (oldYaw || 0)))\n  if (yawDiff > 0.1) {\n    oldYaw = attitude.yaw\n    yaw.value = degrees(store.attitude.yaw)\n  }\n})\n\n// Returns the projected X position of the yaw line for a given angle\nconst angleX = (angle: number): number => {\n  const diff = angle - yaw.value || 0\n  let x = -diff\n  if (x < -180) {\n    x += 360\n  } else if (x > 180) {\n    x -= 360\n  }\n  return -x\n}\n\nconst canvasRef = ref<HTMLCanvasElement | undefined>()\nconst canvasContext = ref()\nconst renderCanvas = (): void => {\n  if (canvasRef.value === undefined || canvasRef.value === null) return\n  if (canvasContext.value === undefined) {\n    console.debug('Canvas context undefined!')\n    canvasContext.value = canvasRef.value.getContext('2d')\n    return\n  }\n  const ctx = canvasContext.value\n  resetCanvas(ctx)\n\n  const halfCanvasWidth = 0.5 * canvasSize.value.width\n  const halfCanvasHeight = 0.5 * canvasSize.value.height\n  const linesFontSize = 12\n  const refFontSize = 16\n  const refTriangleSize = 10\n  const stdPad = 2\n  const minorLinesGap = 7\n\n  // Set canvas general properties\n  ctx.textAlign = 'center'\n  ctx.strokeStyle = 'white'\n  ctx.font = `bold ${linesFontSize}px Arial`\n  ctx.fillStyle = 'white'\n\n  // Draw line for each angle\n  for (const [angle, x] of Object.entries(renderVars.yawLinesX)) {\n    if (x < -90 || x > 90) continue\n    const angleOffsetX = ((2 * halfCanvasWidth) / Math.PI) * Math.sin(radians(x))\n    const anglePositionX = halfCanvasWidth + angleOffsetX\n    ctx.beginPath()\n    ctx.moveTo(anglePositionX, refFontSize + stdPad + refTriangleSize + stdPad)\n    ctx.lineTo(anglePositionX, halfCanvasHeight * 2 - linesFontSize - stdPad - minorLinesGap)\n    ctx.lineWidth = '1'\n\n    // For angles that are multiple of 15 degrees, use a bolder line and write angle down\n    if (Number(angle) % 15 === 0) {\n      ctx.lineWidth = '2'\n      ctx.lineTo(anglePositionX, halfCanvasHeight * 2 - linesFontSize - stdPad)\n      let finalAngle = Number(angle)\n      if (!widget.value.options.useNegativeRange) {\n        finalAngle = finalAngle < 0 ? finalAngle + 360 : finalAngle\n      }\n      ctx.fillText(angleRender(Number(finalAngle)), anglePositionX, halfCanvasHeight * 2 - stdPad)\n    }\n    ctx.stroke()\n  }\n\n  // Draw reference text\n  if (widget.value.options.showYawValue) {\n    ctx.font = `bold ${refFontSize}px Arial`\n\n    let finalAngle = Number(yaw.value)\n    if (!widget.value.options.useNegativeRange) {\n      finalAngle = finalAngle < 0 ? finalAngle + 360 : finalAngle\n    }\n    ctx.fillText(`${finalAngle.toFixed(1)}°`, halfCanvasWidth, refFontSize)\n  }\n\n  // Draw reference triangle\n  ctx.beginPath()\n  ctx.moveTo(halfCanvasWidth, refFontSize + stdPad + refTriangleSize)\n  ctx.lineTo(halfCanvasWidth - 0.5 * refTriangleSize, stdPad + refFontSize + stdPad)\n  ctx.lineTo(halfCanvasWidth + 0.5 * refTriangleSize, stdPad + refFontSize + stdPad)\n  ctx.lineTo(halfCanvasWidth, refFontSize + stdPad + refTriangleSize)\n  ctx.closePath()\n  ctx.fill()\n\n  // Add transparent mask over widget borders\n  ctx.globalCompositeOperation = 'source-in'\n  const grH = ctx.createLinearGradient(0, halfCanvasHeight, canvasSize.value.width, halfCanvasHeight)\n  grH.addColorStop(0.18, colord(widget.value.options.hudColor).alpha(0).toRgbString())\n  grH.addColorStop(0.3, colord(widget.value.options.hudColor).alpha(1).toRgbString())\n  grH.addColorStop(0.7, colord(widget.value.options.hudColor).alpha(1).toRgbString())\n  grH.addColorStop(0.82, colord(widget.value.options.hudColor).alpha(0).toRgbString())\n  ctx.fillStyle = grH\n  ctx.fillRect(0, 0, canvasSize.value.width, halfCanvasHeight * 2)\n}\n\n// Update the X position of each line in the render variables with GSAP to smooth the transition\nwatch(yaw, () => {\n  yawAngles.forEach((angle: number) => {\n    const position = angleX(angle)\n    // Only interpolate angle render with GSAP when the angle is not changing\n    // sides, so it doesn't cross across the screen.\n    if (Math.abs(renderVars.yawLinesX[angle] - position) > 90) {\n      renderVars.yawLinesX[angle] = position\n    } else {\n      gsap.to(renderVars.yawLinesX, { duration: 2.5, ease: 'elastic.out(1.2, 0.5)', [angle]: position })\n    }\n  })\n})\n\n// Update canvas whenever reference variables changes\nwatch([renderVars, canvasSize, widget.value.options], () => {\n  if (!widgetStore.isWidgetVisible(widget.value)) return\n  nextTick(() => renderCanvas())\n})\n\nconst canvasVisible = useElementVisibility(canvasRef)\nwatch(canvasVisible, (isVisible, wasVisible) => {\n  if (isVisible && !wasVisible) renderCanvas()\n})\n</script>\n\n<style scoped>\n.main {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  min-width: 200px;\n  min-height: 60px;\n}\n</style>\n"],"names":["widgetStore","useWidgetManagerStore","interfaceStore","useAppInterfaceStore","datalogger","DatalogVariable","store","useMainVehicleStore","widget","toRefs","__props","colorSwatches","ref","angleRender","angle","renderVars","reactive","yawAngles","i","onBeforeMount","onMounted","angleX","renderCanvas","windowWidth","useWindowSize","canvasSize","computed","yaw","oldYaw","watch","attitude","degrees","x","canvasRef","canvasContext","ctx","resetCanvas","halfCanvasWidth","halfCanvasHeight","linesFontSize","refFontSize","refTriangleSize","stdPad","minorLinesGap","angleOffsetX","radians","anglePositionX","finalAngle","grH","colord","position","gsap","nextTick","canvasVisible","useElementVisibility","isVisible","wasVisible"],"mappings":"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"}