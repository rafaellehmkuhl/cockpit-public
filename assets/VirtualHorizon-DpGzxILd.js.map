{"version":3,"file":"VirtualHorizon-DpGzxILd.js","sources":["../../src/components/widgets/VirtualHorizon.vue"],"sourcesContent":["<template>\n  <div ref=\"virtualHorizonRoot\" class=\"virtualHorizon\">\n    <canvas\n      ref=\"canvasRef\"\n      :height=\"smallestDimension\"\n      :width=\"smallestDimension\"\n      class=\"rounded-[15%] bg-slate-950/70\"\n    ></canvas>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useWindowSize } from '@vueuse/core'\nimport gsap from 'gsap'\nimport { computed, nextTick, onMounted, reactive, ref, toRefs, watch } from 'vue'\n\nimport { datalogger, DatalogVariable } from '@/libs/sensors-logging'\nimport { degrees, radians, resetCanvas } from '@/libs/utils'\nimport { useMainVehicleStore } from '@/stores/mainVehicle'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { Widget } from '@/types/widgets'\n\nconst widgetStore = useWidgetManagerStore()\n\nconst props = defineProps<{\n  /**\n   * Widget reference\n   */\n  widget: Widget\n}>()\nconst widget = toRefs(props).widget\n\ndatalogger.registerUsage(DatalogVariable.roll)\ndatalogger.registerUsage(DatalogVariable.pitch)\nconst store = useMainVehicleStore()\nconst virtualHorizonRoot = ref()\nconst canvasRef = ref<HTMLCanvasElement | undefined>()\nconst canvasContext = ref()\n\n// Make canvas size follows window resizing\nconst { width: windowWidth, height: windowHeight } = useWindowSize()\nconst width = computed(() => widget.value.size.width * windowWidth.value)\nconst height = computed(() => widget.value.size.height * windowHeight.value)\n\n// Calculates the smallest between the widget dimensions, so we can keep the inner content always inside it, without overlays\nconst smallestDimension = computed(() => (width.value < height.value ? width.value : height.value))\n\n// Renders the updated canvas state\nconst renderCanvas = (): void => {\n  if (canvasRef.value === undefined || canvasRef.value === null) return\n  if (canvasContext.value === undefined) canvasContext.value = canvasRef.value.getContext('2d')\n\n  const ctx = canvasContext.value\n  resetCanvas(ctx)\n\n  const halfCanvasSize = 0.5 * smallestDimension.value\n\n  // Set canvas general properties\n  const fontSize = 0.06 * smallestDimension.value\n  const baseLineWidth = 0.03 * halfCanvasSize\n\n  ctx.textAlign = 'center'\n  ctx.strokeStyle = 'white'\n  ctx.font = `bold ${fontSize}px Arial`\n  ctx.fillStyle = 'white'\n  ctx.lineWidth = baseLineWidth\n  ctx.textBaseline = 'middle'\n\n  const outerCircleRadius = 0.7 * halfCanvasSize\n\n  // Start drawing from the center\n  ctx.translate(halfCanvasSize, halfCanvasSize)\n\n  // Set 0 degrees on the top position\n  ctx.rotate(radians(-90))\n\n  ctx.rotate(radians(90))\n\n  // Draw outer circle\n  ctx.save()\n  ctx.strokeStyle = 'white'\n  ctx.lineWidth = 1.5 * baseLineWidth\n  ctx.beginPath()\n  ctx.arc(0, 0, outerCircleRadius, 0, radians(360))\n  ctx.stroke()\n  ctx.restore()\n\n  ctx.save()\n\n  ctx.rotate(radians(renderVariables.rollAngleDegrees))\n\n  // Draw circular clipping mask\n  ctx.beginPath()\n  ctx.arc(0, 0, outerCircleRadius, 0, radians(360))\n  ctx.clip()\n\n  const pitchGainFactor = 4\n  const zeroPitchLineHeight = pitchGainFactor * (renderVariables.pitchAngleDegrees / 90) * outerCircleRadius\n\n  // Draw virtual horizon ground and sky\n  const skyGradient = ctx.createLinearGradient(0, -outerCircleRadius, 0, outerCircleRadius)\n  skyGradient.addColorStop(0, 'rgb(69, 144, 190)')\n  skyGradient.addColorStop(1, 'rgb(137, 190, 228)')\n  ctx.fillStyle = skyGradient\n  ctx.fillRect(-1.5 * outerCircleRadius, zeroPitchLineHeight, +3 * outerCircleRadius, -3 * outerCircleRadius)\n  const groundGradient = ctx.createLinearGradient(0, -outerCircleRadius, 0, outerCircleRadius)\n  groundGradient.addColorStop(0, 'rgb(176, 117, 80)')\n  groundGradient.addColorStop(1, 'rgb(200, 149, 98)')\n  ctx.fillStyle = groundGradient\n  ctx.fillRect(-1.5 * outerCircleRadius, zeroPitchLineHeight, +3 * outerCircleRadius, 3 * outerCircleRadius)\n\n  // Draw virtual horizon moving line\n  ctx.lineWidth = 0.6 * baseLineWidth\n  ctx.strokeStyle = 'white'\n  ctx.beginPath()\n  ctx.moveTo(-0.75 * outerCircleRadius, zeroPitchLineHeight)\n  ctx.lineTo(-0.45 * outerCircleRadius, zeroPitchLineHeight)\n  ctx.lineTo(-0.43 * outerCircleRadius, zeroPitchLineHeight + 0.07 * outerCircleRadius)\n  ctx.moveTo(0.75 * outerCircleRadius, zeroPitchLineHeight)\n  ctx.lineTo(0.45 * outerCircleRadius, zeroPitchLineHeight)\n  ctx.lineTo(0.43 * outerCircleRadius, zeroPitchLineHeight + 0.07 * outerCircleRadius)\n  ctx.stroke()\n\n  // Draw pitch lines\n  ctx.save()\n  ctx.fillStyle = 'white'\n  ctx.strokeStyle = 'white'\n  ctx.lineWidth = 0.5 * baseLineWidth\n  ctx.font = `bold ${fontSize}px Arial`\n  for (const angle of [-10, 0, 10]) {\n    const lineSizeMultiplier = pitchGainFactor * Math.abs(angle / 300) || 0.15\n    const pitchLineHeight = pitchGainFactor * (angle / 90) * outerCircleRadius\n    const smallerPitchLineHeight = pitchGainFactor * ((angle - 5 * Math.sign(angle)) / 90) * outerCircleRadius\n    ctx.beginPath()\n    ctx.moveTo(-lineSizeMultiplier * outerCircleRadius, pitchLineHeight)\n    ctx.lineTo(+lineSizeMultiplier * outerCircleRadius, pitchLineHeight)\n    ctx.moveTo(-0.5 * lineSizeMultiplier * outerCircleRadius, smallerPitchLineHeight)\n    ctx.lineTo(+0.5 * lineSizeMultiplier * outerCircleRadius, smallerPitchLineHeight)\n    ctx.stroke()\n    ctx.textAlign = 'right'\n    ctx.fillText(`${Math.abs(angle)}`, -1 * (lineSizeMultiplier * outerCircleRadius + 0.3 * fontSize), pitchLineHeight)\n    ctx.textAlign = 'left'\n    ctx.fillText(`${Math.abs(angle)}`, 1 * (lineSizeMultiplier * outerCircleRadius + 0.3 * fontSize), pitchLineHeight)\n  }\n  ctx.restore()\n\n  ctx.restore()\n\n  // Draw current horizon fixed reference lines\n  ctx.save()\n  ctx.lineWidth = 0.8 * baseLineWidth\n  ctx.rotate(radians(renderVariables.rollAngleDegrees))\n  ctx.beginPath()\n  ctx.moveTo(-1 * outerCircleRadius, 0)\n  ctx.lineTo(-0.85 * outerCircleRadius, 0)\n  ctx.moveTo(0.85 * outerCircleRadius, 0)\n  ctx.lineTo(1 * outerCircleRadius, 0)\n  ctx.stroke()\n  ctx.restore()\n\n  // Draw current roll fixed reference lines\n  for (const angle of [-60, -45, -30, -20, -10, 0, 10, 20, 30, 45, 60]) {\n    ctx.save()\n    ctx.rotate(radians(angle))\n    ctx.beginPath()\n    if ([-60, -30, 30, 60].includes(angle)) {\n      ctx.lineWidth = 0.8 * baseLineWidth\n      ctx.moveTo(0, -1.2 * outerCircleRadius)\n      ctx.lineTo(0, -1 * outerCircleRadius)\n    } else if ([-20, -10, 10, 20].includes(angle)) {\n      ctx.lineWidth = 0.6 * baseLineWidth\n      ctx.moveTo(0, -1.1 * outerCircleRadius)\n      ctx.lineTo(0, -1 * outerCircleRadius)\n    } else if ([-45, 45].includes(angle)) {\n      ctx.lineWidth = 0.01 * baseLineWidth\n      ctx.moveTo(0, -1.01 * outerCircleRadius)\n      ctx.lineTo(-0.05 * outerCircleRadius, -1.15 * outerCircleRadius)\n      ctx.lineTo(+0.05 * outerCircleRadius, -1.15 * outerCircleRadius)\n      ctx.lineTo(0, -1.01 * outerCircleRadius)\n    } else if (angle === 0) {\n      ctx.lineWidth = 0.01 * baseLineWidth\n      ctx.moveTo(0, -1.01 * outerCircleRadius)\n      ctx.lineTo(-0.07 * outerCircleRadius, -1.25 * outerCircleRadius)\n      ctx.lineTo(+0.07 * outerCircleRadius, -1.25 * outerCircleRadius)\n      ctx.lineTo(0, -1.01 * outerCircleRadius)\n    }\n    ctx.stroke()\n    ctx.fill()\n    ctx.restore()\n  }\n\n  // Draw virtual roll moving triangle\n  ctx.save()\n  ctx.beginPath()\n  ctx.rotate(radians(90))\n  ctx.rotate(radians(renderVariables.rollAngleDegrees))\n  ctx.lineWidth = 0.01 * baseLineWidth\n  ctx.fillStyle = 'rgb(221, 43, 43)'\n  ctx.moveTo(-1 * outerCircleRadius, 0)\n  ctx.lineTo(-0.8 * outerCircleRadius, -0.08 * outerCircleRadius)\n  ctx.lineTo(-0.8 * outerCircleRadius, 0.08 * outerCircleRadius)\n  ctx.lineTo(-1 * outerCircleRadius, 0)\n  ctx.stroke()\n  ctx.fill()\n  ctx.restore()\n}\n\n/**\n * Deal with high frequency update and decrease cpu usage when drawing low degrees changes\n */\n\nconst rollAngleDeg = ref(0.01)\nconst pitchAngleDeg = ref(0.01)\n\nlet oldRoll: number | undefined = undefined\nlet oldPitch: number | undefined = undefined\nwatch(store.attitude, (attitude) => {\n  if (oldRoll === undefined || oldPitch === undefined) {\n    rollAngleDeg.value = degrees(store.attitude.roll)\n    pitchAngleDeg.value = degrees(store.attitude.pitch)\n    oldRoll = attitude.roll\n    oldPitch = attitude.pitch\n    return\n  }\n\n  const rollDiff = Math.abs(degrees(attitude.roll - oldRoll))\n  const pitchDiff = Math.abs(degrees(attitude.pitch - oldPitch))\n\n  if (rollDiff > 0.1) {\n    oldRoll = attitude.roll\n    rollAngleDeg.value = degrees(store.attitude.roll)\n  }\n\n  if (pitchDiff > 0.1) {\n    oldPitch = attitude.pitch\n    pitchAngleDeg.value = degrees(store.attitude.pitch)\n  }\n})\n\n// eslint-disable-next-line jsdoc/require-jsdoc\ntype RenderVariables = { rollAngleDegrees: number; pitchAngleDegrees: number }\n// Object used to store current render state\nconst renderVariables = reactive<RenderVariables>({\n  pitchAngleDegrees: 0,\n  rollAngleDegrees: 0,\n})\n\nwatch(pitchAngleDeg, () => {\n  gsap.to(renderVariables, 0.1, { pitchAngleDegrees: pitchAngleDeg.value })\n})\n\nwatch(rollAngleDeg, () => {\n  gsap.to(renderVariables, 0.1, { rollAngleDegrees: -1 * rollAngleDeg.value })\n})\n\n// Update canvas whenever reference variables changes\nwatch([renderVariables, width, height], () => {\n  if (!widgetStore.isWidgetVisible(widget.value)) return\n  nextTick(() => renderCanvas())\n})\n\nonMounted(() => {\n  // Set initial values, since 0 or 360 degrees does not render\n  gsap.to(renderVariables, 0.1, { pitchAngleDegrees: pitchAngleDeg.value })\n  gsap.to(renderVariables, 0.1, { rollAngleDegrees: -1 * rollAngleDeg.value })\n\n  renderCanvas()\n})\n</script>\n\n<style scoped>\n.virtualHorizon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"names":["widgetStore","useWidgetManagerStore","widget","toRefs","__props","datalogger","DatalogVariable","store","useMainVehicleStore","virtualHorizonRoot","ref","canvasRef","canvasContext","windowWidth","windowHeight","useWindowSize","width","computed","height","smallestDimension","renderCanvas","ctx","resetCanvas","halfCanvasSize","fontSize","baseLineWidth","outerCircleRadius","radians","renderVariables","pitchGainFactor","zeroPitchLineHeight","skyGradient","groundGradient","angle","lineSizeMultiplier","pitchLineHeight","smallerPitchLineHeight","rollAngleDeg","pitchAngleDeg","oldRoll","oldPitch","watch","attitude","degrees","rollDiff","pitchDiff","reactive","gsap","nextTick","onMounted"],"mappings":"wmBAsBA,MAAMA,EAAcC,IAQdC,EAASC,EANDC,CAMa,EAAE,OAElBC,EAAA,cAAcC,EAAgB,IAAI,EAClCD,EAAA,cAAcC,EAAgB,KAAK,EAC9C,MAAMC,EAAQC,IACRC,EAAqBC,IACrBC,EAAYD,IACZE,EAAgBF,IAGhB,CAAE,MAAOG,EAAa,OAAQC,CAAA,EAAiBC,IAC/CC,EAAQC,EAAS,IAAMf,EAAO,MAAM,KAAK,MAAQW,EAAY,KAAK,EAClEK,EAASD,EAAS,IAAMf,EAAO,MAAM,KAAK,OAASY,EAAa,KAAK,EAGrEK,EAAoBF,EAAS,IAAOD,EAAM,MAAQE,EAAO,MAAQF,EAAM,MAAQE,EAAO,KAAM,EAG5FE,EAAe,IAAY,CAC/B,GAAIT,EAAU,QAAU,QAAaA,EAAU,QAAU,KAAM,OAC3DC,EAAc,QAAU,SAAWA,EAAc,MAAQD,EAAU,MAAM,WAAW,IAAI,GAE5F,MAAMU,EAAMT,EAAc,MAC1BU,EAAYD,CAAG,EAET,MAAAE,EAAiB,GAAMJ,EAAkB,MAGzCK,EAAW,IAAOL,EAAkB,MACpCM,EAAgB,IAAOF,EAE7BF,EAAI,UAAY,SAChBA,EAAI,YAAc,QACdA,EAAA,KAAO,QAAQG,CAAQ,WAC3BH,EAAI,UAAY,QAChBA,EAAI,UAAYI,EAChBJ,EAAI,aAAe,SAEnB,MAAMK,EAAoB,GAAMH,EAG5BF,EAAA,UAAUE,EAAgBA,CAAc,EAGxCF,EAAA,OAAOM,EAAQ,GAAG,CAAC,EAEnBN,EAAA,OAAOM,EAAQ,EAAE,CAAC,EAGtBN,EAAI,KAAK,EACTA,EAAI,YAAc,QAClBA,EAAI,UAAY,IAAMI,EACtBJ,EAAI,UAAU,EACdA,EAAI,IAAI,EAAG,EAAGK,EAAmB,EAAGC,EAAQ,GAAG,CAAC,EAChDN,EAAI,OAAO,EACXA,EAAI,QAAQ,EAEZA,EAAI,KAAK,EAETA,EAAI,OAAOM,EAAQC,EAAgB,gBAAgB,CAAC,EAGpDP,EAAI,UAAU,EACdA,EAAI,IAAI,EAAG,EAAGK,EAAmB,EAAGC,EAAQ,GAAG,CAAC,EAChDN,EAAI,KAAK,EAET,MAAMQ,EAAkB,EAClBC,EAAsBD,GAAmBD,EAAgB,kBAAoB,IAAMF,EAGnFK,EAAcV,EAAI,qBAAqB,EAAG,CAACK,EAAmB,EAAGA,CAAiB,EAC5EK,EAAA,aAAa,EAAG,mBAAmB,EACnCA,EAAA,aAAa,EAAG,oBAAoB,EAChDV,EAAI,UAAYU,EAChBV,EAAI,SAAS,KAAOK,EAAmBI,EAAqB,EAAKJ,EAAmB,GAAKA,CAAiB,EAC1G,MAAMM,EAAiBX,EAAI,qBAAqB,EAAG,CAACK,EAAmB,EAAGA,CAAiB,EAC5EM,EAAA,aAAa,EAAG,mBAAmB,EACnCA,EAAA,aAAa,EAAG,mBAAmB,EAClDX,EAAI,UAAYW,EAChBX,EAAI,SAAS,KAAOK,EAAmBI,EAAqB,EAAKJ,EAAmB,EAAIA,CAAiB,EAGzGL,EAAI,UAAY,GAAMI,EACtBJ,EAAI,YAAc,QAClBA,EAAI,UAAU,EACVA,EAAA,OAAO,KAAQK,EAAmBI,CAAmB,EACrDT,EAAA,OAAO,KAAQK,EAAmBI,CAAmB,EACzDT,EAAI,OAAO,KAAQK,EAAmBI,EAAsB,IAAOJ,CAAiB,EAChFL,EAAA,OAAO,IAAOK,EAAmBI,CAAmB,EACpDT,EAAA,OAAO,IAAOK,EAAmBI,CAAmB,EACxDT,EAAI,OAAO,IAAOK,EAAmBI,EAAsB,IAAOJ,CAAiB,EACnFL,EAAI,OAAO,EAGXA,EAAI,KAAK,EACTA,EAAI,UAAY,QAChBA,EAAI,YAAc,QAClBA,EAAI,UAAY,GAAMI,EAClBJ,EAAA,KAAO,QAAQG,CAAQ,WAC3B,UAAWS,IAAS,CAAC,IAAK,EAAG,EAAE,EAAG,CAChC,MAAMC,EAAqBL,EAAkB,KAAK,IAAII,EAAQ,GAAG,GAAK,IAChEE,EAAkBN,GAAmBI,EAAQ,IAAMP,EACnDU,EAAyBP,IAAoBI,EAAQ,EAAI,KAAK,KAAKA,CAAK,GAAK,IAAMP,EACzFL,EAAI,UAAU,EACdA,EAAI,OAAO,CAACa,EAAqBR,EAAmBS,CAAe,EACnEd,EAAI,OAAO,CAACa,EAAqBR,EAAmBS,CAAe,EACnEd,EAAI,OAAO,IAAOa,EAAqBR,EAAmBU,CAAsB,EAChFf,EAAI,OAAO,GAAOa,EAAqBR,EAAmBU,CAAsB,EAChFf,EAAI,OAAO,EACXA,EAAI,UAAY,QAChBA,EAAI,SAAS,GAAG,KAAK,IAAIY,CAAK,CAAC,GAAI,IAAMC,EAAqBR,EAAoB,GAAMF,GAAWW,CAAe,EAClHd,EAAI,UAAY,OAChBA,EAAI,SAAS,GAAG,KAAK,IAAIY,CAAK,CAAC,GAAI,GAAKC,EAAqBR,EAAoB,GAAMF,GAAWW,CAAe,CACnH,CACAd,EAAI,QAAQ,EAEZA,EAAI,QAAQ,EAGZA,EAAI,KAAK,EACTA,EAAI,UAAY,GAAMI,EACtBJ,EAAI,OAAOM,EAAQC,EAAgB,gBAAgB,CAAC,EACpDP,EAAI,UAAU,EACVA,EAAA,OAAO,GAAKK,EAAmB,CAAC,EAChCL,EAAA,OAAO,KAAQK,EAAmB,CAAC,EACnCL,EAAA,OAAO,IAAOK,EAAmB,CAAC,EAClCL,EAAA,OAAO,EAAIK,EAAmB,CAAC,EACnCL,EAAI,OAAO,EACXA,EAAI,QAAQ,EAGZ,UAAWY,IAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,GAAI,GAAI,EAAE,EACjEZ,EAAI,KAAK,EACLA,EAAA,OAAOM,EAAQM,CAAK,CAAC,EACzBZ,EAAI,UAAU,EACV,CAAC,IAAK,IAAK,GAAI,EAAE,EAAE,SAASY,CAAK,GACnCZ,EAAI,UAAY,GAAMI,EAClBJ,EAAA,OAAO,EAAG,KAAOK,CAAiB,EAClCL,EAAA,OAAO,EAAG,GAAKK,CAAiB,GAC3B,CAAC,IAAK,IAAK,GAAI,EAAE,EAAE,SAASO,CAAK,GAC1CZ,EAAI,UAAY,GAAMI,EAClBJ,EAAA,OAAO,EAAG,KAAOK,CAAiB,EAClCL,EAAA,OAAO,EAAG,GAAKK,CAAiB,GAC3B,CAAC,IAAK,EAAE,EAAE,SAASO,CAAK,GACjCZ,EAAI,UAAY,IAAOI,EACnBJ,EAAA,OAAO,EAAG,MAAQK,CAAiB,EACvCL,EAAI,OAAO,KAAQK,EAAmB,MAAQA,CAAiB,EAC/DL,EAAI,OAAO,IAAQK,EAAmB,MAAQA,CAAiB,EAC3DL,EAAA,OAAO,EAAG,MAAQK,CAAiB,GAC9BO,IAAU,IACnBZ,EAAI,UAAY,IAAOI,EACnBJ,EAAA,OAAO,EAAG,MAAQK,CAAiB,EACvCL,EAAI,OAAO,KAAQK,EAAmB,MAAQA,CAAiB,EAC/DL,EAAI,OAAO,IAAQK,EAAmB,MAAQA,CAAiB,EAC3DL,EAAA,OAAO,EAAG,MAAQK,CAAiB,GAEzCL,EAAI,OAAO,EACXA,EAAI,KAAK,EACTA,EAAI,QAAQ,EAIdA,EAAI,KAAK,EACTA,EAAI,UAAU,EACVA,EAAA,OAAOM,EAAQ,EAAE,CAAC,EACtBN,EAAI,OAAOM,EAAQC,EAAgB,gBAAgB,CAAC,EACpDP,EAAI,UAAY,IAAOI,EACvBJ,EAAI,UAAY,mBACZA,EAAA,OAAO,GAAKK,EAAmB,CAAC,EACpCL,EAAI,OAAO,IAAOK,EAAmB,KAAQA,CAAiB,EAC9DL,EAAI,OAAO,IAAOK,EAAmB,IAAOA,CAAiB,EACzDL,EAAA,OAAO,GAAKK,EAAmB,CAAC,EACpCL,EAAI,OAAO,EACXA,EAAI,KAAK,EACTA,EAAI,QAAQ,CAAA,EAORgB,EAAe3B,EAAI,GAAI,EACvB4B,EAAgB5B,EAAI,GAAI,EAE9B,IAAI6B,EACAC,EACEC,EAAAlC,EAAM,SAAWmC,GAAa,CAC9B,GAAAH,IAAY,QAAaC,IAAa,OAAW,CACnDH,EAAa,MAAQM,EAAQpC,EAAM,SAAS,IAAI,EAChD+B,EAAc,MAAQK,EAAQpC,EAAM,SAAS,KAAK,EAClDgC,EAAUG,EAAS,KACnBF,EAAWE,EAAS,MACpB,MACF,CAEA,MAAME,EAAW,KAAK,IAAID,EAAQD,EAAS,KAAOH,CAAO,CAAC,EACpDM,EAAY,KAAK,IAAIF,EAAQD,EAAS,MAAQF,CAAQ,CAAC,EAEzDI,EAAW,KACbL,EAAUG,EAAS,KACnBL,EAAa,MAAQM,EAAQpC,EAAM,SAAS,IAAI,GAG9CsC,EAAY,KACdL,EAAWE,EAAS,MACpBJ,EAAc,MAAQK,EAAQpC,EAAM,SAAS,KAAK,EACpD,CACD,EAKD,MAAMqB,EAAkBkB,EAA0B,CAChD,kBAAmB,EACnB,iBAAkB,CAAA,CACnB,EAED,OAAAL,EAAMH,EAAe,IAAM,CACzBS,EAAK,GAAGnB,EAAiB,GAAK,CAAE,kBAAmBU,EAAc,MAAO,CAAA,CACzE,EAEDG,EAAMJ,EAAc,IAAM,CACnBU,EAAA,GAAGnB,EAAiB,GAAK,CAAE,iBAAkB,GAAKS,EAAa,MAAO,CAAA,CAC5E,EAGDI,EAAM,CAACb,EAAiBZ,EAAOE,CAAM,EAAG,IAAM,CACvClB,EAAY,gBAAgBE,EAAO,KAAK,GACpC8C,EAAA,IAAM5B,GAAc,CAAA,CAC9B,EAED6B,EAAU,IAAM,CAEdF,EAAK,GAAGnB,EAAiB,GAAK,CAAE,kBAAmBU,EAAc,MAAO,EACnES,EAAA,GAAGnB,EAAiB,GAAK,CAAE,iBAAkB,GAAKS,EAAa,MAAO,EAE9DjB,GAAA,CACd"}