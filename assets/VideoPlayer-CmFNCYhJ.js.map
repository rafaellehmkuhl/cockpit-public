{"version":3,"file":"VideoPlayer-CmFNCYhJ.js","sources":["../../src/components/VideoPlayerStatsForNerds.vue","../../node_modules/vuetify/lib/components/VBanner/VBannerText.mjs","../../src/components/widgets/VideoPlayer.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <canvas ref=\"canvasRef\" :width=\"width\" :height=\"height\"></canvas>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { WebRTCStats } from '@peermetrics/webrtc-stats'\nimport { onBeforeUnmount, onMounted, onUnmounted, ref, watch } from 'vue'\n\nimport { useVideoStore } from '@/stores/video'\nimport { WebRTCStatsEvent } from '@/types/video'\nconst videoStore = useVideoStore()\n\nconst props = defineProps({\n  width: {\n    type: Number,\n    default: 130,\n  },\n  height: {\n    type: Number,\n    default: 200,\n  },\n  updateInterval: {\n    type: Number,\n    default: 20,\n  },\n  streamName: {\n    type: String,\n    default: '',\n  },\n})\n\nconst canvasRef = ref(null)\nconst framerateData = ref([])\nconst bitrateData = ref([])\nconst packetLostData = ref([])\nlet animationFrameId = null\nlet intervalId = null\nlet bitrate = 0\n// cumulative values\nlet packetsLost = 0\nlet packetsReceived = 0\nlet totalProcessingDelay = 0\nlet nackCount = 0\nlet pliCount = 0\nlet firCount = 0\nlet framesReceived = 0\nlet connectionLost = false\n\nlet processingDelayDelta = 0\nlet freezes = 0\nlet frozenTime = 0\nlet framedrops = 0\n\nlet packetLossPercentage = 0\nlet framerate = 0\nlet packetLostDelta = 0\nlet videoHeight = 0\n\nconst maxDataPoints = 100\nlet maxBitrateReceived = 1000 // max bitrate received, used for scaling the plot\nlet maxFramerateReceived = 30 // max framerate received, used for scaling the plot\nlet maxPacketLost = 10 // max packet lost, used for scaling the plot\nlet absoluteMaxFrameRate = 120 // Absolute maximum framerate, used for dealing with outliers\n\nconst plotHeight = 60 // Height of the plot area\n/**\n * Normalize the value to fit the plot area\n * @param {number} value - The current value\n * @param {number} max - The maximum value currently in the plot\n * @returns {number} The normalized value\n */\nfunction normalizeValue(value: number, max: number): number {\n  return (value / max) * plotHeight\n}\n\n/**\n * Draw the line plots and stats\n */\nfunction draw(): void {\n  const canvas = canvasRef.value\n  const ctx = canvas.getContext('2d')\n  const { width, height } = props\n\n  ctx.clearRect(0, 0, width, height)\n\n  /**\n   *\n   * @param {number[]} data  - The data to plot\n   * @param {string} color - The color of the plot\n   * @param {number} max - The maximum value of the data, used for scaling the plot\n   */\n  function drawPlot(data: number[], color: string, max: number): void {\n    ctx.strokeStyle = color\n    ctx.lineWidth = 1\n    ctx.beginPath()\n    for (let i = 0; i < data.length; i++) {\n      const x = (i / (maxDataPoints - 1)) * width\n      const y = height - normalizeValue(data[i], max)\n      if (i === 0) ctx.moveTo(x, y)\n      else ctx.lineTo(x, y)\n    }\n    ctx.stroke()\n  }\n\n  // Draw the plots\n  drawPlot(bitrateData.value, 'rgb(255, 165, 0)', maxBitrateReceived)\n  drawPlot(framerateData.value, 'rgb(0, 255, 0)', maxFramerateReceived)\n  drawPlot(packetLostData.value, 'rgb(255, 0, 0)', maxPacketLost)\n\n  // Print text stats\n  const color = connectionLost ? 'red' : 'white'\n  const stats = [\n    { label: 'Stream', value: props.streamName, color: color },\n    { label: 'Size', value: videoHeight ? `${videoHeight}p` : 'N/A', color: color },\n    { label: 'Packets Lost', value: `${packetsLost} (${packetLossPercentage.toFixed(0)}%)`, color: color },\n    { label: 'Frame drops', value: framedrops, color: color },\n    { label: 'Nack', value: nackCount, color: color },\n    { label: 'Pli', value: pliCount, color: color },\n    { label: 'Fir', value: firCount, color: color },\n    { label: 'Processing ', value: `${processingDelayDelta.toFixed(0)}ms`, color: color },\n    { label: 'Freezes', value: `${freezes}(${frozenTime.toFixed(1)}s)`, color: color },\n    { label: 'Bitrate', value: `${bitrate.toFixed(0)}kbps`, color: 'rgb(255, 165, 0)' },\n    { label: 'FPS', value: framerate.toFixed(2), color: 'rgb(0, 255, 0)' },\n  ]\n\n  ctx.font = '10px Arial'\n  stats.forEach((stat, index) => {\n    ctx.fillStyle = stat.color\n    ctx.fillText(`${stat.label}: ${stat.value}`, 5, 12 + index * 12)\n  })\n\n  animationFrameId = requestAnimationFrame(draw)\n}\n\nconst webrtcStats = new WebRTCStats({ getStatsInterval: 100 })\n\n/**\n * Draws the lines and updates the stats\n */\nfunction update(): void {\n  framerateData.value.push(framerate)\n  bitrateData.value.push(bitrate)\n  packetLostData.value.push(Math.min(packetLostDelta, maxPacketLost))\n  if (framerateData.value.length > maxDataPoints) framerateData.value.shift()\n  if (bitrateData.value.length > maxDataPoints) bitrateData.value.shift()\n  if (packetLostData.value.length > maxDataPoints) packetLostData.value.shift()\n\n  // Update max values\n  maxBitrateReceived = Math.max(maxBitrateReceived, ...bitrateData.value)\n  maxFramerateReceived = Math.max(maxFramerateReceived, ...framerateData.value)\n  maxFramerateReceived = Math.min(maxFramerateReceived, absoluteMaxFrameRate)\n}\n\nwatch(videoStore.activeStreams, (streams): void => {\n  Object.keys(streams).forEach((streamName) => {\n    if (streamName !== props.streamName) return\n    const session = streams[streamName]?.webRtcManager.session\n    if (!session || !session.peerConnection) return\n    if (webrtcStats.peersToMonitor[session.consumerId]) return\n    webrtcStats.addConnection({\n      pc: session.peerConnection,\n      peerId: session.consumerId,\n      connectionId: session.id,\n      remote: false,\n    })\n  })\n})\n\nonMounted(() => {\n  intervalId = setInterval(update, props.updateInterval)\n  draw()\n  webrtcStats.on('stats', (ev: WebRTCStatsEvent) => {\n    try {\n      const videoData = ev.data.video.inbound[0]\n      if (videoData === undefined) return\n      connectionLost = videoData.bitrate === 0\n      if (!isNaN(videoData.bitrate)) {\n        const newBitrate = videoData.bitrate / 1000\n        bitrate = bitrate * 0.8 + newBitrate * 0.2\n      }\n      packetLostDelta = videoData.packetsLost - packetsLost\n      packetsLost = videoData.packetsLost\n      nackCount = videoData.nackCount\n      pliCount = videoData.pliCount\n      firCount = videoData.firCount\n      packetsReceived = videoData.packetsReceived\n      let totalProcessingDelayDelta = videoData.totalProcessingDelay - totalProcessingDelay\n      let framesDelta = videoData.framesReceived - framesReceived\n      processingDelayDelta = (1000 * totalProcessingDelayDelta) / framesDelta\n      framesReceived = videoData.framesReceived\n      totalProcessingDelay = videoData.totalProcessingDelay\n      packetLossPercentage = (packetsLost / (packetsLost + packetsReceived)) * 100\n      freezes = videoData.freezeCount\n      frozenTime = videoData.totalFreezesDuration\n      framedrops = videoData.framesDropped\n      framerate = videoData.framesPerSecond ?? 0\n      videoHeight = videoData.frameHeight\n    } catch (e) {\n      console.error(e)\n    }\n  })\n})\n\nonUnmounted(() => {\n  clearInterval(intervalId)\n  cancelAnimationFrame(animationFrameId)\n})\n\nonBeforeUnmount(() => {\n  webrtcStats.destroy()\n})\n</script>\n\n<style scoped>\n.canvas-container {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 2;\n}\n</style>\n","// Utilities\nimport { createSimpleFunctional } from \"../../util/index.mjs\";\nexport const VBannerText = createSimpleFunctional('v-banner-text');\n//# sourceMappingURL=VBannerText.mjs.map","<template>\n  <div ref=\"videoWidget\" class=\"video-widget\">\n    <statsForNerds v-if=\"widget.options.statsForNerds\" :stream-name=\"externalStreamId\" />\n    <div v-if=\"nameSelectedStream === undefined\" class=\"no-video-alert\">\n      <span>No video stream selected.</span>\n    </div>\n    <div\n      v-else-if=\"!namesAvailableStreams.isEmpty() && !namesAvailableStreams.includes(nameSelectedStream)\"\n      class=\"no-video-alert\"\n    >\n      <p>The selected stream \"{{ nameSelectedStream }}\" is not available.</p>\n      <p>Available ones are: {{ namesAvailableStreams.map((name) => `\"${name}\"`).join(', ') }}.</p>\n      <br />\n      <p>\n        This can happen if you changed vehicles and the stream name in the new one is different from the former, or if\n        the source is not available at all.\n      </p>\n      <br />\n      <p>\n        Please open this video player configuration and select a new stream from the ones available, or check your\n        source for issues.\n      </p>\n    </div>\n    <div v-else-if=\"!streamConnected\" class=\"no-video-alert\">\n      <div class=\"no-video-alert\">\n        <p>\n          <span class=\"text-xl font-bold\">Server status: </span>\n          <span v-for=\"(statusParagraph, i) in serverStatus.toString().split('\\\\n')\" :key=\"i\">\n            {{ statusParagraph }}\n            <br />\n          </span>\n        </p>\n        <p>\n          <span class=\"text-xl font-bold\">Stream status: </span>\n          <span v-for=\"(statusParagraph, i) in streamStatus.toString().split('\\\\n')\" :key=\"i\">\n            {{ statusParagraph }}\n            <br />\n          </span>\n        </p>\n      </div>\n    </div>\n    <div v-else class=\"no-video-alert\">\n      <p>Loading stream...</p>\n    </div>\n    <video id=\"mainDisplayStream\" ref=\"videoElement\" muted autoplay playsinline disablePictureInPicture>\n      Your browser does not support the video tag.\n    </video>\n  </div>\n  <v-dialog v-model=\"widgetStore.widgetManagerVars(widget.hash).configMenuOpen\" width=\"auto\">\n    <v-card class=\"pa-4 text-white\" style=\"border-radius: 15px\" :style=\"interfaceStore.globalGlassMenuStyles\">\n      <v-card-title class=\"text-center\">Video widget config</v-card-title>\n      <v-card-text class=\"flex flex-col gap-y-4\">\n        <v-select\n          v-model=\"nameSelectedStream\"\n          label=\"Stream name\"\n          class=\"my-3\"\n          :items=\"namesAvailableStreams\"\n          item-title=\"name\"\n          density=\"compact\"\n          variant=\"outlined\"\n          no-data-text=\"No streams available.\"\n          hide-details\n          return-object\n        />\n        <v-select\n          v-model=\"widget.options.videoFitStyle\"\n          label=\"Fit style\"\n          class=\"my-3\"\n          :items=\"['cover', 'fill', 'contain']\"\n          item-title=\"style\"\n          density=\"compact\"\n          variant=\"outlined\"\n          no-data-text=\"No streams available.\"\n          hide-details\n          return-object\n        />\n        <v-banner-text>Saved stream name: \"{{ widget.options.internalStreamName }}\"</v-banner-text>\n        <v-switch\n          v-model=\"widget.options.flipHorizontally\"\n          class=\"my-1\"\n          label=\"Flip horizontally\"\n          :color=\"widget.options.flipHorizontally ? 'white' : undefined\"\n          hide-details\n        />\n        <v-switch\n          v-model=\"widget.options.flipVertically\"\n          class=\"my-1\"\n          label=\"Flip vertically\"\n          :color=\"widget.options.flipVertically ? 'white' : undefined\"\n          hide-details\n        />\n        <v-switch\n          v-model=\"widget.options.statsForNerds\"\n          class=\"my-1\"\n          label=\"Stats for nerds\"\n          :color=\"widget.options.statsForNerds ? 'white' : undefined\"\n          hide-details\n        />\n        <div class=\"flex-wrap justify-center d-flex ga-5\">\n          <v-btn prepend-icon=\"mdi-file-rotate-left\" variant=\"outlined\" @click=\"rotateVideo(-90)\"> Rotate Left</v-btn>\n          <v-btn prepend-icon=\"mdi-file-rotate-right\" variant=\"outlined\" @click=\"rotateVideo(+90)\"> Rotate Right</v-btn>\n        </div>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from 'pinia'\nimport { computed, onBeforeMount, onBeforeUnmount, ref, toRefs, watch } from 'vue'\n\nimport StatsForNerds from '@/components/VideoPlayerStatsForNerds.vue'\nimport { isEqual } from '@/libs/utils'\nimport { useAppInterfaceStore } from '@/stores/appInterface'\nimport { useVideoStore } from '@/stores/video'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { Widget } from '@/types/widgets'\nconst interfaceStore = useAppInterfaceStore()\n\nconst videoStore = useVideoStore()\nconst widgetStore = useWidgetManagerStore()\n\nconst { namessAvailableAbstractedStreams: namesAvailableStreams } = storeToRefs(videoStore)\n\nconst props = defineProps<{\n  /**\n   * Widget reference\n   */\n  widget: Widget\n}>()\n\nconst widget = toRefs(props).widget\n\nconst nameSelectedStream = ref<string | undefined>()\nconst videoElement = ref<HTMLVideoElement | undefined>()\nconst mediaStream = ref<MediaStream | undefined>()\nconst streamConnected = ref(false)\n\nonBeforeMount(() => {\n  // Set the default initial values that are not present in the widget options\n  const defaultOptions = {\n    videoFitStyle: 'cover',\n    flipHorizontally: false,\n    flipVertically: false,\n    rotationAngle: 0,\n    statsForNerds: false,\n    internalStreamName: undefined as string | undefined,\n  }\n  widget.value.options = Object.assign({}, defaultOptions, widget.value.options)\n  nameSelectedStream.value = widget.value.options.internalStreamName\n})\n\nconst externalStreamId = computed(() => {\n  return nameSelectedStream.value ? videoStore.externalStreamId(nameSelectedStream.value) : undefined\n})\n\nwatch(\n  () => videoStore.streamsCorrespondency,\n  () => {\n    mediaStream.value = undefined\n\n    if (!nameSelectedStream.value) return\n\n    const selectedExternalId = videoStore.externalStreamId(nameSelectedStream.value)\n    if (!selectedExternalId) return\n\n    const newStreamCorr = videoStore.streamsCorrespondency.find((stream) => stream.externalId === selectedExternalId)\n    if (!newStreamCorr) return\n\n    const newInternalName = newStreamCorr.name\n\n    if (nameSelectedStream.value !== newInternalName) {\n      nameSelectedStream.value = newInternalName\n      widget.value.options.internalStreamName = newInternalName\n    }\n  },\n  { deep: true }\n)\n\nconst streamConnectionRoutine = setInterval(() => {\n  // If the video player widget is cold booted, assign the first stream to it\n  if (widget.value.options.internalStreamName === undefined && !namesAvailableStreams.value.isEmpty()) {\n    widget.value.options.internalStreamName = namesAvailableStreams.value[0]\n    nameSelectedStream.value = widget.value.options.internalStreamName\n  }\n\n  if (externalStreamId.value !== undefined) {\n    const updatedMediaStream = videoStore.getMediaStream(externalStreamId.value)\n    // If the widget is not connected to the MediaStream, try to connect it\n    if (!isEqual(updatedMediaStream, mediaStream.value)) {\n      mediaStream.value = updatedMediaStream\n    }\n\n    const updatedStreamState = videoStore.getStreamData(externalStreamId.value)?.connected ?? false\n    if (updatedStreamState !== streamConnected.value) {\n      streamConnected.value = updatedStreamState\n    }\n  }\n\n  if (!namesAvailableStreams.value.isEmpty() && !namesAvailableStreams.value.includes(nameSelectedStream.value!)) {\n    if (videoStore.lastRenamedStreamName !== '') {\n      nameSelectedStream.value = videoStore.lastRenamedStreamName\n      return\n    }\n    nameSelectedStream.value = namesAvailableStreams.value[0]\n  }\n}, 1000)\nonBeforeUnmount(() => clearInterval(streamConnectionRoutine))\n\nwatch(nameSelectedStream, () => {\n  widget.value.options.internalStreamName = nameSelectedStream.value\n  mediaStream.value = undefined\n})\n\nwatch(mediaStream, () => {\n  if (!videoElement.value || !mediaStream.value) return\n  videoElement.value.srcObject = mediaStream.value\n  videoElement.value\n    .play()\n    .then(() => console.log('[VideoPlayer] Stream is playing'))\n    .catch((reason) => {\n      const msg = `Failed to play stream. Reason: ${reason}`\n      console.error(`[VideoPlayer] ${msg}`)\n    })\n})\n\nconst rotateVideo = (angle: number): void => {\n  widget.value.options.rotationAngle += angle\n}\n\nconst flipStyle = computed(() => {\n  return `scale(${widget.value.options.flipHorizontally ? -1 : 1}, ${widget.value.options.flipVertically ? -1 : 1})`\n})\n\nconst rotateStyle = computed(() => {\n  return `rotate(${widget.value.options.rotationAngle ?? 0}deg)`\n})\n\nconst transformStyle = computed(() => {\n  return `${flipStyle.value} ${rotateStyle.value}`\n})\n\nconst serverStatus = computed(() => {\n  if (externalStreamId.value === undefined) return 'Unknown.'\n  return videoStore.getStreamData(externalStreamId.value)?.webRtcManager.signallerStatus ?? 'Unknown.'\n})\n\nconst streamStatus = computed(() => {\n  if (externalStreamId.value === undefined) return 'Unknown.'\n\n  const availableSources = videoStore.availableIceIps\n  if (!availableSources.isEmpty() && !availableSources.find((ip) => videoStore.allowedIceIps.includes(ip))) {\n    return `Stream is coming from IPs [${availableSources.join(', ')}], which are not in the list of allowed sources\n      [${videoStore.allowedIceIps.join(', ')}].\\\\n Please check your configuration.`\n  }\n  return videoStore.getStreamData(externalStreamId.value)?.webRtcManager.streamStatus ?? 'Unknown.'\n})\n</script>\n\n<style scoped>\n.video-widget {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\nvideo {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  object-fit: v-bind('widget.options.videoFitStyle');\n  transform: v-bind('transformStyle');\n}\n.no-video-alert {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background-color: rgb(0, 20, 60);\n  text-align: center;\n  vertical-align: middle;\n  padding: 3rem;\n  color: white;\n  border: 2px solid rgb(0, 20, 80);\n}\n</style>\n"],"names":["maxDataPoints","plotHeight","videoStore","useVideoStore","props","__props","canvasRef","ref","framerateData","bitrateData","packetLostData","animationFrameId","intervalId","bitrate","packetsLost","packetsReceived","totalProcessingDelay","nackCount","pliCount","firCount","framesReceived","connectionLost","processingDelayDelta","freezes","frozenTime","framedrops","packetLossPercentage","framerate","packetLostDelta","videoHeight","maxBitrateReceived","maxFramerateReceived","maxPacketLost","absoluteMaxFrameRate","normalizeValue","value","max","draw","ctx","width","height","drawPlot","data","color","i","x","y","stats","stat","index","webrtcStats","WebRTCStats","update","watch","streams","streamName","session","_a","onMounted","ev","videoData","newBitrate","totalProcessingDelayDelta","framesDelta","e","onUnmounted","onBeforeUnmount","VBannerText","createSimpleFunctional","interfaceStore","useAppInterfaceStore","widgetStore","useWidgetManagerStore","namesAvailableStreams","storeToRefs","widget","toRefs","nameSelectedStream","videoElement","mediaStream","streamConnected","onBeforeMount","defaultOptions","externalStreamId","computed","selectedExternalId","newStreamCorr","stream","newInternalName","streamConnectionRoutine","updatedMediaStream","isEqual","updatedStreamState","reason","msg","rotateVideo","angle","flipStyle","rotateStyle","transformStyle","serverStatus","streamStatus","availableSources","ip"],"mappings":"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","x_google_ignoreList":[1]}