{"version":3,"file":"Attitude-CUJM6wa8.js","sources":["../../src/components/widgets/Attitude.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n    <canvas ref=\"canvasRef\" :width=\"canvasSize.width\" :height=\"canvasSize.height\" />\n  </div>\n  <v-dialog v-model=\"widgetStore.widgetManagerVars(widget.hash).configMenuOpen\" min-width=\"400\" max-width=\"45%\">\n    <v-card class=\"pa-4\" :style=\"interfaceStore.globalGlassMenuStyles\" style=\"border-radius: 15px\">\n      <v-card-title class=\"text-center\">Attitude widget config</v-card-title>\n      <v-card-text>\n        <div class=\"flex justify-center gap-x-8 mb-4\">\n          <v-switch\n            class=\"ma-1\"\n            label=\"Show roll/pitch values\"\n            :model-value=\"widget.options.showRollPitchValues\"\n            :color=\"widget.options.showRollPitchValues ? 'white' : undefined\"\n            hide-details\n            @change=\"widget.options.showRollPitchValues = !widget.options.showRollPitchValues\"\n          />\n          <v-switch\n            class=\"ma-1\"\n            label=\"Show center aim\"\n            :model-value=\"widget.options.showCenterAim\"\n            :color=\"widget.options.showCenterAim ? 'white' : undefined\"\n            hide-details\n            @change=\"widget.options.showCenterAim = !widget.options.showCenterAim\"\n          />\n          <v-switch\n            class=\"ma-1\"\n            label=\"Show pitch lines\"\n            :model-value=\"widget.options.showPitchLines\"\n            :color=\"widget.options.showPitchLines ? 'white' : undefined\"\n            hide-details\n            @change=\"widget.options.showPitchLines = !widget.options.showPitchLines\"\n          />\n        </div>\n        <v-slider\n          v-model=\"widget.options.cameraFOV\"\n          color=\"white\"\n          label=\"Camera vertical FOV\"\n          :min=\"20\"\n          :max=\"180\"\n          thumb-label\n        />\n        <v-slider\n          v-model=\"widget.options.desiredAimRadius\"\n          label=\"Center circle radius\"\n          color=\"white\"\n          :min=\"10\"\n          :max=\"300\"\n          thumb-label\n        />\n        <v-expansion-panels theme=\"dark\">\n          <v-expansion-panel class=\"bg-[#FFFFFF22]\">\n            <v-expansion-panel-title>Color</v-expansion-panel-title>\n            <v-expansion-panel-text class=\"pa-2\">\n              <v-color-picker\n                v-model=\"widget.options.hudColor\"\n                class=\"ma-1 bg-[#FFFFFF11] text-white\"\n                :swatches=\"colorSwatches\"\n                show-swatches\n                width=\"100%\"\n              />\n            </v-expansion-panel-text>\n          </v-expansion-panel>\n        </v-expansion-panels>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { useElementVisibility, useWindowSize } from '@vueuse/core'\nimport gsap from 'gsap'\nimport { computed, nextTick, onBeforeMount, onMounted, reactive, ref, toRefs, watch } from 'vue'\n\nimport { datalogger, DatalogVariable } from '@/libs/sensors-logging'\nimport { constrain, degrees, radians, resetCanvas, round } from '@/libs/utils'\nimport { useAppInterfaceStore } from '@/stores/appInterface'\nimport { useMainVehicleStore } from '@/stores/mainVehicle'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { Widget } from '@/types/widgets'\n\nconst widgetStore = useWidgetManagerStore()\nconst interfaceStore = useAppInterfaceStore()\n\ndatalogger.registerUsage(DatalogVariable.roll)\ndatalogger.registerUsage(DatalogVariable.pitch)\nconst store = useMainVehicleStore()\nconst props = defineProps<{\n  /**\n   * Widget reference\n   */\n  widget: Widget\n}>()\nconst widget = toRefs(props).widget\n\nconst canvasRef = ref<HTMLCanvasElement | undefined>()\nconst canvasContext = ref()\n\ntype RenderVariables = {\n  /**\n   * Rendering roll value, in degrees\n   */\n  rollDegrees: number\n  /**\n   * Vertical height of the pitch line for each angle\n   */\n  pitchLinesHeights: { [angle: string]: number }\n\n  /**\n   * Camera tilt angle, in degrees\n   */\n  cameraTiltDeg: number\n\n  /**\n   * Rendering pitch value, in degrees\n   */\n  pitchDegrees: number\n}\n\nconst rollAngleDeg = ref(0)\nconst pitchAngleDeg = ref(0)\nconst cameraTiltDeg = ref(undefined as number | undefined)\n\n// Pitch angles for which horizontal indication lines are rendered.\nconst pitchAngles = [-90, -70, -45, -30, -10, 0, 10, 30, 45, 70, 90]\n\n// Rendering variables. Store current rendering state.\nconst renderVars = reactive<RenderVariables>({\n  rollDegrees: 0,\n  pitchLinesHeights: {},\n  cameraTiltDeg: 0,\n  pitchDegrees: 0,\n})\n\n// Pre-defined HUD colors\nconst colorSwatches = ref([['#FFFFFF'], ['#FF2D2D'], ['#0ADB0ACC']])\n\nconst defaultOptions = {\n  showCenterAim: true,\n  showPitchLines: true,\n  showRollPitchValues: true,\n  desiredAimRadius: 150,\n  hudColor: colorSwatches.value[0][0],\n  cameraFOV: 64,\n}\nonBeforeMount(() => {\n  // Set initial widget options if they don't exist\n  Object.entries(defaultOptions).forEach(([key, value]) => {\n    if (widget.value.options[key] === undefined) {\n      widget.value.options[key] = value\n    }\n  })\n})\n\nonMounted(() => {\n  // Instantiate the initial pitch object\n  pitchAngles.forEach((a: number) => (renderVars.pitchLinesHeights[a] = 5 * a))\n  renderCanvas()\n})\n\n// Make canvas size follows window resizing\nconst { width: windowWidth, height: windowHeight } = useWindowSize()\nconst canvasSize = computed(() => ({\n  width: widget.value.size.width * windowWidth.value,\n  height: widget.value.size.height * windowHeight.value,\n}))\n\n// Center aim radius, constrained from user's input\nconst aimRadius = computed(() => constrain(widget.value.options.desiredAimRadius, 35, 0.2 * canvasSize.value.width))\n\n/**\n * Deal with high frequency update and decrease cpu usage when drawing\n * low degrees changes\n */\nlet oldRoll: number | undefined = undefined\nlet oldPitch: number | undefined = undefined\nwatch(store.attitude, (attitude) => {\n  const rollDiff = Math.abs(degrees(attitude.roll - (oldRoll || 0)))\n  const pitchDiff = Math.abs(degrees(attitude.pitch - (oldPitch || 0)))\n\n  if (rollDiff > 0.1) {\n    oldRoll = attitude.roll\n    rollAngleDeg.value = degrees(store.attitude.roll)\n  }\n\n  if (pitchDiff > 0.1) {\n    oldPitch = attitude.pitch\n    pitchAngleDeg.value = degrees(store.attitude.pitch)\n  }\n})\n\nwatch(store.genericVariables, (message: Record<string, unknown>) => {\n  const new_tilt = message.cameraTiltDeg as number\n  if (cameraTiltDeg.value === undefined || Math.abs(new_tilt - cameraTiltDeg.value) > 0.1) {\n    cameraTiltDeg.value = new_tilt\n  }\n})\n\n// Returns the projected height of a pitch line for a given angle\nconst angleY = (angle: number): number => {\n  // if we had 180 deg of fov, top would be 90\n  // if we had 90 deg of fov, top would be 45\n  // then we scale the angle accordingly.\n  const angle_factor = 180 / widget.value.options.cameraFOV\n  // now we scale the current angle to 180 deg fov\n  const scaled_angle = angle / 180\n  const ret = scaled_angle * angle_factor * canvasSize.value.height\n  return ret\n}\n\nconst canvasVisible = useElementVisibility(canvasRef)\nwatch(canvasVisible, (isVisible, wasVisible) => {\n  if (isVisible && !wasVisible) renderCanvas()\n})\n\nconst renderCanvas = (): void => {\n  if (canvasRef.value === undefined || canvasRef.value === null) return\n  if (canvasContext.value === undefined) {\n    console.debug('Canvas context undefined!')\n    canvasContext.value = canvasRef.value.getContext('2d')\n    return\n  }\n  const ctx = canvasContext.value\n  resetCanvas(ctx)\n\n  const halfCanvasWidth = 0.5 * canvasSize.value.width\n  const halfCanvasHeight = 0.5 * canvasSize.value.height\n  const linesFontSize = 12\n  const refFontSize = 22\n  const stdPad = 2\n\n  // Set canvas general properties\n  ctx.textAlign = 'center'\n  ctx.strokeStyle = 'white'\n  ctx.font = `bold ${linesFontSize}px Arial`\n  ctx.fillStyle = 'white'\n  const pitchLinesStartRadius = 2.0 * aimRadius.value\n\n  ctx.translate(halfCanvasWidth, halfCanvasHeight)\n  ctx.rotate(radians(renderVars.rollDegrees))\n\n  let centerPos = 0\n  if (cameraTiltDeg.value !== undefined) {\n    centerPos = -angleY(renderVars.cameraTiltDeg + renderVars.pitchDegrees)\n  }\n\n  // Draw line for each angle\n  for (const [angle, height] of Object.entries(renderVars.pitchLinesHeights)) {\n    ctx.beginPath()\n\n    const lineWidthFactor = Number(angle) === 0 ? 1.0 : 0.7\n    const lineDashPattern = Number(angle) === 0 ? [] : [5, 2]\n    const lineThickness = Number(angle) === 0 ? 3 : 2\n\n    ctx.lineWidth = lineThickness\n    ctx.setLineDash(lineDashPattern)\n\n    if (widget.value.options.showPitchLines) {\n      const distanceFromCenter = pitchLinesStartRadius + lineWidthFactor * (halfCanvasWidth - pitchLinesStartRadius)\n      // Draw left side of the line\n      ctx.moveTo(-distanceFromCenter + stdPad, height)\n      ctx.lineTo(-pitchLinesStartRadius, height)\n      ctx.lineTo(-pitchLinesStartRadius + 5, height + 15)\n      ctx.fillText(Number(angle), -pitchLinesStartRadius - 4 * stdPad, height - 3 * stdPad)\n\n      // Draw right side of the line\n      ctx.moveTo(+distanceFromCenter - stdPad, height)\n      ctx.lineTo(pitchLinesStartRadius, height)\n      ctx.lineTo(pitchLinesStartRadius - 5, height + 15)\n      ctx.fillText(Number(angle), pitchLinesStartRadius + 4 * stdPad, height - 3 * stdPad)\n\n      ctx.stroke()\n    }\n  }\n\n  ctx.lineWidth = 3\n  ctx.setLineDash([])\n  ctx.font = `bold ${refFontSize}px Arial`\n\n  if (widget.value.options.showCenterAim) {\n    // Draw left side of the aim circle\n    ctx.beginPath()\n    ctx.moveTo(-aimRadius.value, centerPos)\n    ctx.lineTo(-1.5 * aimRadius.value, centerPos)\n    ctx.stroke()\n    ctx.beginPath()\n    ctx.arc(0, centerPos, aimRadius.value, radians(135), radians(225))\n    ctx.stroke()\n\n    // Draw right side of the aim circle\n    ctx.beginPath()\n    ctx.moveTo(aimRadius.value, centerPos)\n    ctx.lineTo(1.5 * aimRadius.value, centerPos)\n    ctx.stroke()\n    ctx.beginPath()\n    ctx.arc(0, centerPos, aimRadius.value, radians(-45), radians(45))\n    ctx.stroke()\n  }\n\n  if (widget.value.options.showRollPitchValues) {\n    const rollText = `r: ${Number(rollAngleDeg.value).toFixed(2)}`\n    const pitchText = `p: ${Number(pitchAngleDeg.value).toFixed(2)}`\n\n    ctx.rotate(radians(-renderVars.rollDegrees))\n    if (aimRadius.value < 200) {\n      ctx.fillText(rollText, 0, constrain(-1.5 * aimRadius.value, -0.8 * halfCanvasHeight, 0))\n      ctx.fillText(pitchText, 0, constrain(+1.5 * aimRadius.value, 0, 0.8 * halfCanvasHeight))\n    } else {\n      ctx.textAlign = 'start'\n      ctx.fillText(rollText, -aimRadius.value + refFontSize, -30)\n      ctx.fillText(pitchText, -aimRadius.value + refFontSize, +30)\n    }\n    ctx.stroke()\n  }\n\n  // Revert translation and rotation\n  ctx.translate(-halfCanvasWidth, -halfCanvasHeight)\n\n  // Add transparent mask over widget borders\n  ctx.globalCompositeOperation = 'source-in'\n  const grH = ctx.createLinearGradient(0, 0, canvasSize.value.width, canvasSize.value.height)\n  grH.addColorStop(0.0, widget.value.options.hudColor)\n  grH.addColorStop(1.0, widget.value.options.hudColor)\n  ctx.fillStyle = grH\n  ctx.fillRect(0, 0, canvasSize.value.width, canvasSize.value.height)\n}\n\n// Update the height of each pitch line when the vehicle pitch is updated\nwatch(pitchAngleDeg, () => {\n  pitchAngles.forEach((angle: number) => {\n    const y = -round(angleY(angle + renderVars.cameraTiltDeg - degrees(store.attitude.pitch)), 2)\n    gsap.to(renderVars.pitchLinesHeights, 0.1, { [angle]: y })\n  })\n  gsap.to(renderVars, 0.1, { pitchDegrees: pitchAngleDeg.value })\n})\n\n// Update the HUD roll angle when the vehicle roll is updated\nwatch(rollAngleDeg, () => {\n  gsap.to(renderVars, 0.1, { rollDegrees: -round(rollAngleDeg.value, 2) })\n})\n\nwatch(cameraTiltDeg, () => {\n  gsap.to(renderVars, 0.1, { cameraTiltDeg: cameraTiltDeg.value })\n  pitchAngles.forEach((angle: number) => {\n    const y = -round(angleY(angle + renderVars.cameraTiltDeg - degrees(store.attitude.pitch)), 2)\n    gsap.to(renderVars.pitchLinesHeights, 0.1, { [angle]: y })\n  })\n})\n\n// Update canvas whenever reference variables changes\nwatch([renderVars, canvasSize, widget.value.options], () => {\n  if (!widgetStore.isWidgetVisible(widget.value)) return\n  nextTick(() => renderCanvas())\n})\n</script>\n\n<style scoped>\n.main {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n</style>\n"],"names":["widgetStore","useWidgetManagerStore","interfaceStore","useAppInterfaceStore","datalogger","DatalogVariable","store","useMainVehicleStore","widget","toRefs","__props","canvasRef","ref","canvasContext","rollAngleDeg","pitchAngleDeg","cameraTiltDeg","pitchAngles","renderVars","reactive","colorSwatches","defaultOptions","onBeforeMount","key","value","onMounted","a","renderCanvas","windowWidth","windowHeight","useWindowSize","canvasSize","computed","aimRadius","constrain","oldRoll","oldPitch","watch","attitude","rollDiff","degrees","pitchDiff","message","new_tilt","angleY","angle","angle_factor","canvasVisible","useElementVisibility","isVisible","wasVisible","ctx","resetCanvas","halfCanvasWidth","halfCanvasHeight","linesFontSize","refFontSize","stdPad","pitchLinesStartRadius","radians","centerPos","height","lineWidthFactor","lineDashPattern","lineThickness","distanceFromCenter","rollText","pitchText","grH","y","round","gsap","nextTick"],"mappings":"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"}