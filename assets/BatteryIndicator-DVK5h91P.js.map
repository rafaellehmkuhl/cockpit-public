{"version":3,"file":"BatteryIndicator-DVK5h91P.js","sources":["../../src/components/mini-widgets/BatteryIndicator.vue"],"sourcesContent":["<template>\n  <div v-tooltip=\"'Battery information'\" class=\"flex items-center w-[5.5rem] h-12 text-white justify-center\">\n    <span class=\"relative w-[1.5rem] mdi battery-icon\" :class=\"[batteryIconClass]\">\n      <span class=\"absolute text-sm text-yellow-400 -bottom-[2px] -right-[7px] mdi mdi-alert-circle\"></span>\n    </span>\n    <div class=\"flex flex-col w-[4rem] select-none text-sm font-semibold leading-4 text-end\">\n      <div class=\"w-full\">\n        <span class=\"font-mono\">{{ voltageDisplayValue }}</span>\n        <span> V</span>\n      </div>\n      <div class=\"w-full\">\n        <template v-if=\"showCurrent\">\n          <span class=\"font-mono\">{{ currentDisplayValue }}</span>\n          <span> A</span>\n        </template>\n        <template v-else>\n          <span class=\"font-mono\">{{ instantaneousWattsDisplayValue }}</span>\n          <span> W</span>\n        </template>\n      </div>\n    </div>\n  </div>\n  <v-dialog v-model=\"widgetStore.miniWidgetManagerVars(miniWidget.hash).configMenuOpen\" width=\"auto\">\n    <v-card class=\"pa-4 text-white w-[20rem]\" style=\"border-radius: 15px\" :style=\"interfaceStore.globalGlassMenuStyles\">\n      <v-card-title class=\"text-center\">Battery Indicator Config</v-card-title>\n      <v-card-text class=\"flex flex-col gap-y-4\">\n        <v-checkbox v-model=\"miniWidget.options.showCurrent\" label=\"Show Current\" hide-details />\n        <v-checkbox v-model=\"miniWidget.options.showPower\" label=\"Show Power\" hide-details />\n        <v-text-field\n          v-model.number=\"userSetToggleInterval\"\n          label=\"Toggle Interval (ms)\"\n          type=\"number\"\n          :min=\"minInterval\"\n          step=\"100\"\n          density=\"compact\"\n          variant=\"outlined\"\n          :disabled=\"!miniWidget.options.showCurrent || !miniWidget.options.showPower\"\n        />\n        <p class=\"text-red-500 text-center text-sm w-[full]\">{{ errorMessage }}</p>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onBeforeMount, onUnmounted, ref, toRefs, watch } from 'vue'\n\nimport { datalogger, DatalogVariable } from '@/libs/sensors-logging'\nimport { useAppInterfaceStore } from '@/stores/appInterface'\nimport { useMainVehicleStore } from '@/stores/mainVehicle'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { MiniWidget } from '@/types/widgets'\n\n/**\n * Props for the BatteryIndicator component\n */\nconst props = defineProps<{\n  /**\n   * Configuration of the widget\n   */\n  miniWidget: MiniWidget\n}>()\nconst miniWidget = toRefs(props).miniWidget\n\nconst defaultOptions = {\n  showCurrent: true,\n  showPower: true,\n  toggleInterval: 1000,\n}\n\nconst store = useMainVehicleStore()\nconst widgetStore = useWidgetManagerStore()\nconst interfaceStore = useAppInterfaceStore()\n\nconst showCurrent = ref(true)\nconst toggleIntervaler = ref<ReturnType<typeof setInterval> | undefined>(undefined)\nconst minInterval = 500\nconst errorMessage = ref('')\nconst errorMessageTimeout = ref<ReturnType<typeof setTimeout> | undefined>(undefined)\nconst userSetToggleInterval = ref(miniWidget.value.options.toggleInterval ?? defaultOptions.toggleInterval)\n\nconst voltageDisplayValue = computed(() => {\n  if (store?.powerSupply?.voltage === undefined) return NaN\n  return Math.abs(store.powerSupply.voltage) >= 100\n    ? store.powerSupply.voltage.toFixed(0)\n    : store.powerSupply.voltage.toFixed(1)\n})\n\nconst currentDisplayValue = computed(() => {\n  if (store?.powerSupply?.current === undefined) return NaN\n  return Math.abs(store.powerSupply.current) >= 100\n    ? store.powerSupply.current.toFixed(0)\n    : store.powerSupply.current.toFixed(1)\n})\n\nconst instantaneousWattsDisplayValue = computed(() => {\n  return store.instantaneousWatts !== undefined ? store.instantaneousWatts.toFixed(1) : NaN\n})\n\nconst batteryIconClass = computed(() => {\n  return 'mdi-battery'\n})\n\nconst setupToggleInterval = (): void => {\n  if (toggleIntervaler.value || errorMessageTimeout.value) {\n    clearInterval(toggleIntervaler.value)\n    clearTimeout(errorMessageTimeout.value)\n  }\n\n  // Ensure toggle interval is at least minInterval\n  if (userSetToggleInterval.value < minInterval) {\n    miniWidget.value.options.toggleInterval = minInterval\n    errorMessage.value = `Interval must be at least ${minInterval}ms.`\n  } else {\n    miniWidget.value.options.toggleInterval = userSetToggleInterval.value\n  }\n\n  // Ensure at least one of current or power is enabled\n  if (!miniWidget.value.options.showCurrent && !miniWidget.value.options.showPower) {\n    miniWidget.value.options.showCurrent = true\n    miniWidget.value.options.showPower = true\n    errorMessage.value = 'At least one of the options must be enabled.'\n  }\n\n  if (miniWidget.value.options.showCurrent && miniWidget.value.options.showPower) {\n    toggleIntervaler.value = setInterval(() => {\n      showCurrent.value = !showCurrent.value\n    }, miniWidget.value.options.toggleInterval)\n  } else {\n    showCurrent.value = miniWidget.value.options.showCurrent\n  }\n\n  errorMessageTimeout.value = setTimeout(() => {\n    errorMessage.value = ''\n    if (userSetToggleInterval.value < minInterval) {\n      userSetToggleInterval.value = minInterval\n    }\n  }, 5000)\n}\n\nwatch([() => miniWidget.value.options, userSetToggleInterval], setupToggleInterval, { deep: true })\n\nonBeforeMount(() => {\n  miniWidget.value.options = Object.assign({}, defaultOptions, miniWidget.value.options)\n\n  setupToggleInterval()\n\n  // Register new variable for logging\n  datalogger.registerUsage('Instantaneous Watts' as DatalogVariable)\n})\n\nonUnmounted(() => {\n  if (toggleIntervaler.value !== undefined) return\n  clearInterval(toggleIntervaler.value)\n})\n</script>\n\n<style>\n.battery-icon {\n  font-size: 2.25rem;\n  line-height: 2.25rem;\n}\n</style>\n"],"names":["minInterval","miniWidget","toRefs","__props","defaultOptions","store","useMainVehicleStore","widgetStore","useWidgetManagerStore","interfaceStore","useAppInterfaceStore","showCurrent","ref","toggleIntervaler","errorMessage","errorMessageTimeout","userSetToggleInterval","voltageDisplayValue","computed","_a","currentDisplayValue","instantaneousWattsDisplayValue","batteryIconClass","setupToggleInterval","watch","onBeforeMount","datalogger","onUnmounted"],"mappings":"q3BA4EMA,EAAc,mEAdd,MAAAC,EAAaC,EANLC,CAMiB,EAAE,WAE3BC,EAAiB,CACrB,YAAa,GACb,UAAW,GACX,eAAgB,GAClB,EAEMC,EAAQC,EAAoB,EAC5BC,EAAcC,EAAsB,EACpCC,EAAiBC,EAAqB,EAEtCC,EAAcC,EAAI,EAAI,EACtBC,EAAmBD,EAAgD,MAAS,EAE5EE,EAAeF,EAAI,EAAE,EACrBG,EAAsBH,EAA+C,MAAS,EAC9EI,EAAwBJ,EAAIX,EAAW,MAAM,QAAQ,gBAAkBG,EAAe,cAAc,EAEpGa,EAAsBC,EAAS,IAAM,OACrC,QAAAC,EAAAd,GAAA,YAAAA,EAAO,cAAP,YAAAc,EAAoB,WAAY,OAAkB,IAC/C,KAAK,IAAId,EAAM,YAAY,OAAO,GAAK,IAC1CA,EAAM,YAAY,QAAQ,QAAQ,CAAC,EACnCA,EAAM,YAAY,QAAQ,QAAQ,CAAC,CAAA,CACxC,EAEKe,EAAsBF,EAAS,IAAM,OACrC,QAAAC,EAAAd,GAAA,YAAAA,EAAO,cAAP,YAAAc,EAAoB,WAAY,OAAkB,IAC/C,KAAK,IAAId,EAAM,YAAY,OAAO,GAAK,IAC1CA,EAAM,YAAY,QAAQ,QAAQ,CAAC,EACnCA,EAAM,YAAY,QAAQ,QAAQ,CAAC,CAAA,CACxC,EAEKgB,EAAiCH,EAAS,IACvCb,EAAM,qBAAuB,OAAYA,EAAM,mBAAmB,QAAQ,CAAC,EAAI,GACvF,EAEKiB,EAAmBJ,EAAS,IACzB,aACR,EAEKK,EAAsB,IAAY,EAClCV,EAAiB,OAASE,EAAoB,SAChD,cAAcF,EAAiB,KAAK,EACpC,aAAaE,EAAoB,KAAK,GAIpCC,EAAsB,MAAQhB,GACrBC,EAAA,MAAM,QAAQ,eAAiBD,EAC7Bc,EAAA,MAAQ,6BAA6Bd,CAAW,OAElDC,EAAA,MAAM,QAAQ,eAAiBe,EAAsB,MAI9D,CAACf,EAAW,MAAM,QAAQ,aAAe,CAACA,EAAW,MAAM,QAAQ,YAC1DA,EAAA,MAAM,QAAQ,YAAc,GAC5BA,EAAA,MAAM,QAAQ,UAAY,GACrCa,EAAa,MAAQ,gDAGnBb,EAAW,MAAM,QAAQ,aAAeA,EAAW,MAAM,QAAQ,UAClDY,EAAA,MAAQ,YAAY,IAAM,CAC7BF,EAAA,MAAQ,CAACA,EAAY,KAChC,EAAAV,EAAW,MAAM,QAAQ,cAAc,EAE9BU,EAAA,MAAQV,EAAW,MAAM,QAAQ,YAG3Bc,EAAA,MAAQ,WAAW,IAAM,CAC3CD,EAAa,MAAQ,GACjBE,EAAsB,MAAQhB,IAChCgB,EAAsB,MAAQhB,IAE/B,GAAI,CACT,EAEM,OAAAwB,EAAA,CAAC,IAAMvB,EAAW,MAAM,QAASe,CAAqB,EAAGO,EAAqB,CAAE,KAAM,GAAM,EAElGE,EAAc,IAAM,CACPxB,EAAA,MAAM,QAAU,OAAO,OAAO,CAAI,EAAAG,EAAgBH,EAAW,MAAM,OAAO,EAEjEsB,EAAA,EAGpBG,EAAW,cAAc,qBAAwC,CAAA,CAClE,EAEDC,EAAY,IAAM,CACZd,EAAiB,QAAU,QAC/B,cAAcA,EAAiB,KAAK,CAAA,CACrC"}