{"version":3,"file":"MiniWidgetsBar-Bc92IrfO.js","sources":["../../src/components/widgets/MiniWidgetsBar.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-center justify-center w-full h-full p-2 rounded-md bg-slate-600/50\">\n    <MiniWidgetContainer\n      :container=\"widget.options.miniWidgetsContainer\"\n      :wrap=\"true\"\n      :allow-editing=\"widgetStore.editingMode\"\n      @choose-mini-widget=\"widgetStore.widgetManagerVars(widget.hash).allowMoving = false\"\n      @unchoose-mini-widget=\"widgetStore.widgetManagerVars(widget.hash).allowMoving = true\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { capitalize, onBeforeMount, toRefs } from 'vue'\n\nimport * as Words from '@/libs/funny-name/words'\nimport { useWidgetManagerStore } from '@/stores/widgetManager'\nimport type { Widget } from '@/types/widgets'\n\nimport MiniWidgetContainer from '../MiniWidgetContainer.vue'\n\nconst props = defineProps<{\n  /**\n   * Widget reference\n   */\n  widget: Widget\n}>()\nconst widget = toRefs(props).widget\n\nconst widgetStore = useWidgetManagerStore()\n\nonBeforeMount(() => {\n  // Set initial widget options if they don't exist\n  if (Object.keys(widget.value.options).length === 0) {\n    widget.value.options = {\n      miniWidgetsContainer: {\n        name: `${capitalize(Words.animalsOcean.random() || 'Plankton')} floating container`,\n        widgets: [],\n      },\n    }\n  }\n})\n</script>\n"],"names":["widget","toRefs","__props","widgetStore","useWidgetManagerStore","onBeforeMount","capitalize","Words.animalsOcean"],"mappings":"2kBA2BM,MAAAA,EAASC,EANDC,CAMa,EAAE,OAEvBC,EAAcC,IAEpB,OAAAC,EAAc,IAAM,CAEd,OAAO,KAAKL,EAAO,MAAM,OAAO,EAAE,SAAW,IAC/CA,EAAO,MAAM,QAAU,CACrB,qBAAsB,CACpB,KAAM,GAAGM,EAAWC,EAAmB,UAAY,UAAU,CAAC,sBAC9D,QAAS,CAAC,CACZ,CAAA,EAEJ,CACD"}