"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const n=require("electron"),i=require("path"),f=require("os"),m=require("fs/promises");function w(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t){for(const r in t)if(r!=="default"){const o=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,o.get?o:{enumerable:!0,get:()=>t[r]})}}return e.default=t,Object.freeze(e)}const c=w(m),g=()=>{const t=f.networkInterfaces(),e=Object.entries(t).flatMap(([r,o])=>o.map(a=>({...a,interfaceName:r}))).filter(r=>r.family==="IPv4").filter(r=>!r.internal);if(e.length===0)throw new Error("No network interfaces found.");return e.map(r=>{const o=r.address.split(".").slice(0,3).join("."),a=[];for(let p=1;p<=254;p++)a.push(`${o}.${p}`);return{topSideAddress:r.address,macAddress:r.mac,interfaceName:r.interfaceName,availableAddresses:a}})},h=()=>{n.ipcMain.handle("get-info-on-subnets",g)},l=i.join(n.app.getPath("home"),"Cockpit");c.mkdir(l,{recursive:!0});const d={async setItem(t,e,r){const o=Buffer.from(e),a=i.join(l,...r??[],t);await c.mkdir(i.dirname(a),{recursive:!0}),await c.writeFile(a,o)},async getItem(t,e){const r=i.join(l,...e??[],t);try{return await c.readFile(r)}catch(o){if(o.code==="ENOENT")return null;throw o}},async removeItem(t,e){const r=i.join(l,...e??[],t);await c.unlink(r)},async clear(t){const e=i.join(l,...t??[]);await c.rm(e,{recursive:!0})},async keys(t){const e=i.join(l,...t??[]);try{return await c.readdir(e)}catch(r){if(r.code==="ENOENT")return[];throw r}}},y=()=>{n.ipcMain.handle("setItem",async(t,e)=>{await d.setItem(e.key,e.value,e.subFolders)}),n.ipcMain.handle("getItem",async(t,e)=>await d.getItem(e.key,e.subFolders)),n.ipcMain.handle("removeItem",async(t,e)=>{await d.removeItem(e.key,e.subFolders)}),n.ipcMain.handle("clear",async(t,e)=>{await d.clear(e.subFolders)}),n.ipcMain.handle("keys",async(t,e)=>await d.keys(e.subFolders))},u={dist:i.join(__dirname,"..")};let s;function b(){const{width:t,height:e}=n.screen.getPrimaryDisplay().workAreaSize;s=new n.BrowserWindow({icon:i.join(u.dist,"pwa-512x512.png"),webPreferences:{preload:i.join(u.dist,"electron/preload.js"),contextIsolation:!0,nodeIntegration:!1},width:t,height:e}),s.webContents.on("did-finish-load",()=>{s==null||s.webContents.send("main-process-message",new Date().toLocaleString())}),process.env.VITE_DEV_SERVER_URL?s.loadURL(process.env.VITE_DEV_SERVER_URL):s.loadFile(i.join(u.dist,"index.html"))}n.app.on("window-all-closed",()=>{console.log("Closing application."),s=null,n.app.quit()});n.app.on("ready",()=>{n.protocol.registerFileProtocol("file",(t,e)=>{e({path:t.url.substring(7)})})});n.protocol.registerSchemesAsPrivileged([{scheme:"file",privileges:{secure:!0,standard:!0,supportFetchAPI:!0,allowServiceWorkers:!0}}]);y();h();n.app.whenReady().then(async()=>{console.log("Electron app is ready."),console.log(`Cockpit version: ${n.app.getVersion()}`),console.log("Creating window..."),b()});n.app.on("before-quit",()=>{});exports.ROOT_PATH=u;
