"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const n=require("electron"),a=require("path"),f=require("os"),m=require("fs/promises");function w(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t){for(const r in t)if(r!=="default"){const o=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,o.get?o:{enumerable:!0,get:()=>t[r]})}}return e.default=t,Object.freeze(e)}const s=w(m),g=()=>{const t=f.networkInterfaces(),e=Object.entries(t).flatMap(([r,o])=>o.map(d=>({...d,interfaceName:r}))).filter(r=>r.family==="IPv4").filter(r=>!r.internal);if(e.length===0)throw new Error("No network interfaces found.");return e.map(r=>{const o=r.address.split(".").slice(0,3).join("."),d=[];for(let u=1;u<=254;u++)d.push(`${o}.${u}`);return{topSideAddress:r.address,macAddress:r.mac,interfaceName:r.interfaceName,availableAddresses:d}})},h=()=>{n.ipcMain.handle("get-info-on-subnets",g)},l=a.join(n.app.getPath("home"),"Cockpit");s.mkdir(l,{recursive:!0});const c={async setItem(t,e){const r=Buffer.from(e),o=a.join(l,t);await s.mkdir(a.dirname(o),{recursive:!0}),await s.writeFile(o,r)},async getItem(t){const e=a.join(l,t);try{return await s.readFile(e)}catch(r){if(r.code==="ENOENT")return null;throw r}},async removeItem(t){const e=a.join(l,t);await s.unlink(e)},async clear(){throw new Error(`Clear functionality is not available in the filesystem storage, so we don't risk losing important data. If you
        want to clear the storage, please delete the Cockpit folder in your user data directory manually.`)},async keys(){const t=l;try{return await s.readdir(t)}catch(e){if(e.code==="ENOENT")return[];throw e}}},y=()=>{n.ipcMain.handle("setItem",async(t,e)=>{await c.setItem(e.key,e.value)}),n.ipcMain.handle("getItem",async(t,e)=>await c.getItem(e)),n.ipcMain.handle("removeItem",async(t,e)=>{await c.removeItem(e)}),n.ipcMain.handle("clear",async()=>{await c.clear()}),n.ipcMain.handle("keys",async()=>await c.keys())},p={dist:a.join(__dirname,"..")};let i;function b(){const{width:t,height:e}=n.screen.getPrimaryDisplay().workAreaSize;i=new n.BrowserWindow({icon:a.join(p.dist,"pwa-512x512.png"),webPreferences:{preload:a.join(p.dist,"electron/preload.js"),contextIsolation:!0,nodeIntegration:!1},width:t,height:e}),i.webContents.on("did-finish-load",()=>{i==null||i.webContents.send("main-process-message",new Date().toLocaleString())}),process.env.VITE_DEV_SERVER_URL?i.loadURL(process.env.VITE_DEV_SERVER_URL):i.loadFile(a.join(p.dist,"index.html"))}n.app.on("window-all-closed",()=>{console.log("Closing application."),i=null,n.app.quit()});n.app.on("ready",()=>{n.protocol.registerFileProtocol("file",(t,e)=>{e({path:t.url.substring(7)})})});n.protocol.registerSchemesAsPrivileged([{scheme:"file",privileges:{secure:!0,standard:!0,supportFetchAPI:!0,allowServiceWorkers:!0}}]);y();h();n.app.whenReady().then(async()=>{console.log("Electron app is ready."),console.log(`Cockpit version: ${n.app.getVersion()}`),console.log("Creating window..."),b()});n.app.on("before-quit",()=>{});exports.ROOT_PATH=p;
